5793	Remediation Parameters Type	The Remediation Parameters Type field identifies the type of remediation parameters contained in the Remediation Parameters field . A Posture Broker Client or Posture Broker Server MUST support having multiple Remediation Parameters messages contained in a single PB-TNC batch that have the same Remediation Parameters Type and/or Remediation Parameters Vendor ID .	231	0
5798	Count IPvX Addr	This is the number of either IPv4 addresses or IPv6 addresses contained in this VRRP advertisement .	231	0
5798	Rsvd	This field MUST be set to zero on transmission and ignored on reception .	500	0
5798	Checksum	The checksum field is used to detect data corruption in the VRRP message . The checksum is the 16-bit one's complement of the one's complement sum of the entire VRRP message starting with the version field and a  pseudo-header  as defined in Section 8.1 of [ RFC2460 ]. The next header field in the  pseudo-header  should be set to 112 ( decimal ) for VRRP . For computing the checksum , the checksum field is set to zero . See RFC1071 for more detail [ RFC1071 ].	301	0
7455	Link Trailer	Media-dependent trailer . For Ethernet , this is the FCS ( Frame Check Sequence).Variable	301	1
760	Version	4 bits,The Version field indicates the format of the internet header .	220	0
760	IHL	4 bits Internet Header Length is the length of the internet header in 32 bit words , and thus points to the beginning of the data . Note that the minimum value for a correct header is 5 .	100	0
760	Type of Service	8 bits The Type of Service provides an indication of the abstract parameters of the quality of service desired . These parameters are to be used to guide the selection of the actual service parameters when transmitting a datagram through a particular network . Several networks offer service precedence , which somehow treats high precedence traffic as more important than other traffic . A few networks offer a Stream service , whereby one can achieve a smoother service at some cost . Typically this involves the reservation of resources within the network . Another choice involves a low-delay vs . high-reliability trade off . Typically networks invoke more complex ( and delay producing ) mechanisms as the need for reliability increases . Bits 0-2 : Precedence . Bit 3 : Stream or Datagram . Bits 4-5 : Reliability . Bit 6 : Speed over Reliability . Bits 7 : Speed . 0 1 2 3 4 5 6 7 +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | | | PRECEDENCE | STRM|RELIABILITY| S/R |SPEED| | | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ PRECEDENCE STRM RELIABILITY S/R SPEED 111-Flash Override 1-STREAM 11-highest 1-speed 1-high 110-Flash 0-DTGRM 10-higher 0-rlblt 0-low 11X-Immediate 01-lower 01X-Priority 00-lowest 00X-Routine The type of service is used to specify the treatment of the datagram during its transmission through the internet system . In the discussion ( section 3.2 ) below , a chart shows the relationship of the internet type of service to the actual service provided on the ARPANET , the SATNET , and the PRNET .	240	0
5412	Payload...	This field contains the header for an LWAPP data message or LWAPP control message , followed by the data associated with that message .	400	1
5413	Maj	Maj ( 4 bits ): the major number of the SLAPP version	220	0
5413	Min	Min ( 4 bits ): the minor number of the SLAPP version	220	0
5413	Type	Type ( 1 octet ): the type of SLAPP message	231	0
5096	Header Len	8-bit unsigned integer , representing the length of the Mobility Header in units of 8 octets , excluding the first 8 octets . The length of the Mobility Header MUST be a multiple of 8 octets .	100	0
5096	MH Type	8-bit selector . Identifies the particular mobility message in question . Current values are specified in Section 6.1.2 and onward . An unrecognized MH Type field causes an error indication to be sent .	230	0
5096	Reserved	8-bit field reserved for future use . The value MUST be initialized to zero by the sender , and MUST be ignored by the receiver .	500	0
5096	Checksum	16-bit unsigned integer . This field contains the checksum of the Mobility Header . The checksum is calculated from the octet string consisting of a  pseudo-header  followed by the entire Mobility Header starting with the Payload Proto field . The checksum is the 16-bit one's complement of the one's complement sum of this string . The pseudo-header contains IPv6 header fields , as specified in Section 8.1 of RFC 2460 [ 11 ]. The Next Header value used in the pseudo-header is 2 . The addresses used in the pseudo-header are the addresses that appear in the Source and Destination Address fields in the IPv6 packet carrying the Mobility Header . Note that the procedures of calculating upper layer checksums while away from home described in Section 11.3.1 apply even for the Mobility Header . If a mobility message has a Home Address destination option , then the checksum calculation uses the home address in this option as the value of the IPv6 Source Address field . The type 2 routing header is treated as explained in [ 11 ]. The Mobility Header is considered as the upper layer protocol for the purposes of calculating the pseudo-header . The Upper-Layer Packet Length field in the pseudo-header MUST be set to the total length of the Mobility Header .	301	0
5096	Message Data	The ' Message Data ' field carries the data specific to the experimental protocol extension . The total length of the message is indicated by the ' Header Len ' field in the Mobility Header .	240	1
5395	NAME	NAME is an owner name , i.e ., the name of the node to which this resource record pertains . NAMEs are specific to a CLASS as described in section 3.2 . NAMEs consist of an ordered sequence of one or more labels , each of which has a label type [ RFC1035 ] [ RFC2671 ].	400	1
5395	TYPE	TYPE is a 2-octet unsigned integer containing one of the RRTYPE codes	231	0
5395	CLASS	CLASS is a 2-octet unsigned integer containing one of the RR CLASS codes .	231	0
5395	RDLENGTH	RDLENGTH is an unsigned 16-bit integer that specifies the length in octets of the RDATA field .	100	0
5395	RDATA	RDATA is a variable length string of octets that constitutes the resource . The format of this information varies according to the TYPE and , in some cases , the CLASS of the resource record .	231	1
5412	VER	A 2-bit field that contains the version of LWAPP used in this packet . The value for this document is 0 .	231	0
5412	RID	A 3-bit field that contains the Radio ID number for this packet . WTPs with multiple radios but a single MAC address use this field to indicate which radio is associated with the packet .	231	0
5412	C	The control message ' C ' bit indicates whether this packet carries a data or control message . When this bit is zero ( 0 ), the packet carries an LWAPP data message in the payload ( see Section 4.1 ). When this bit is one ( 1 ), the packet carries an LWAPP control message as defined in Section 4.2 for consumption by the addressed destination .	210	0
5412	F	The Fragment ' F ' bit indicates whether this packet is a fragment . When this bit is one ( 1 ), the packet is a fragment and MUST be combined with the other corresponding fragments to reassemble the complete information exchanged between the WTP and AC .	210	0
5412	L	The Not Last ' L ' bit is valid only if the ' F ' bit is set and indicates whether the packet contains the last fragment of a fragmented exchange between the WTP and AC . When this bit is 1 , the packet is not the last fragment . When this bit is 0 , the packet is the last fragment .	210	0
5412	Length	The 16-bit length field contains the number of bytes in the Payload . The field is encoded as an unsigned number . If the LWAPP packet is encrypted , the length field includes the Advanced Encryption Standard Counter with CBC-MAC ( AES-CCM ) MIC ( see Section 10.2 for more information ).	100	0
5412	Status/WLANs	he interpretation of this 16-bit field is binding-specific . Refer to the transport portion of the binding for a wireless technology for the specification .	231	0
5412	Payload...	This field contains the header for an LWAPP data message or LWAPP control message , followed by the data associated with that message .	400	1
5413	Maj	Maj ( 4 bits ): the major number of the SLAPP version	220	0
4303	Security Parameters Index	The SPI is an arbitrary 32-bit value that is used by a receiver to identify the SA to which an incoming packet is bound . The SPI field is mandatory . For a unicast SA , the SPI can be used by itself to specify an SA , or it may be used in conjunction with the IPsec protocol type ( in this case ESP ). Because the SPI value is generated by the receiver for a unicast SA , whether the value is sufficient to identify an SA by itself or whether it must be used in conjunction with the IPsec protocol value is a local matter . This mechanism for mapping inbound traffic to unicast SAs MUST be supported by all ESP implementations . If an IPsec implementation supports multicast , then it MUST support multicast SAs using the algorithm below for mapping inbound IPsec datagrams to SAs . Implementations that support only unicast traffic need not implement this de-multiplexing algorithm . In many secure multicast architectures ( e.g ., [ RFC3740 ]), a central Group Controller/Key Server unilaterally assigns the group security association's SPI . This SPI assignment is not negotiated or coordinated with the key management ( e.g ., IKE ) subsystems that reside in the individual end systems that comprise the group . Consequently , it is possible that a group security association and a unicast security association can simultaneously use the same SPI . A multicast-capable IPsec implementation MUST correctly de-multiplex inbound traffic even in the context of SPI collisions . Each entry in the Security Association Database ( SAD ) [ Ken-Arch ] must indicate whether the SA lookup makes use of the destination , or destination and source , IP addresses , in addition to the SPI . For multicast SAs , the protocol field is not employed for SA lookups . For each inbound , IPsec-protected packet , an implementation must conduct its search of the SAD such that it finds the entry that matches the  longest  SA identifier . In this context , if two or more SAD entries match based on the SPI value , then the entry that also matches based on destination , or destination and source , address comparison ( as indicated in the SAD entry ) is the  longest  match . This implies a logical ordering of the SAD search as follows : 1 . Search the SAD for a match on { SPI , destination address , source address }. If an SAD entry matches , then process the inbound ESP packet with that matching SAD entry . Otherwise , proceed to step 2 . 2 . Search the SAD for a match on { SPI , destination address }. If the SAD entry matches , then process the inbound ESP packet with that matching SAD entry . Otherwise , proceed to step 3 . 3 . Search the SAD for a match on only { SPI } if the receiver has chosen to maintain a single SPI space for AH and ESP , or on { SPI , protocol } otherwise . If an SAD entry matches , then process the inbound ESP packet with that matching SAD entry . Otherwise , discard the packet and log an auditable event . In practice , an implementation MAY choose any method to accelerate this search , although its externally visible behavior MUST be functionally equivalent to having searched the SAD in the above order . For example , a software-based implementation could index into a hash table by the SPI . The SAD entries in each hash table bucket's linked list are kept sorted to have those SAD entries with the longest SA identifiers first in that linked list . Those SAD entries having the shortest SA identifiers are sorted so that they are the last entries in the linked list . A hardware-based implementation may be able to effect the longest match search intrinsically , using commonly available Ternary Content-Addressable Memory ( TCAM ) features . The indication of whether source and destination address matching is required to map inbound IPsec traffic to SAs MUST be set either as a side effect of manual SA configuration or via negotiation using an SA management protocol , e.g ., IKE or Group Domain of Interpretation ( GDOI ) [ RFC3547 ]. Typically , Source-Specific Multicast ( SSM ) [ HC03 ] groups use a 3-tuple SA identifier composed of an SPI , a destination multicast address , and source address . An Any-Source Multicast group SA requires only an SPI and a destination multicast address as an identifier . The set of SPI values in the range 1 through 255 are reserved by the Internet Assigned Numbers Authority ( IANA ) for future use; a reserved SPI value will not normally be assigned by IANA unless the use of the assigned SPI value is specified in an RFC . The SPI value of zero ( 0 ) is reserved for local , implementation-specific use and MUST NOT be sent on the wire . ( For example , a key management implementation might use the zero SPI value to mean  No Security Association Exists  during the period when the IPsec implementation has requested that its key management entity establish a new SA , but the SA has not yet been established .)	231	0
4303	Padding	Two primary factors require or motivate use of the Padding field . o If an encryption algorithm is employed that requires the plaintext to be a multiple of some number of bytes , e.g ., the block size of a block cipher , the Padding field is used to fill the plaintext ( consisting of the Payload Data , Padding , Pad Length , and Next Header fields ) to the size required by the algorithm . o Padding also may be required , irrespective of encryption algorithm requirements , to ensure that the resulting ciphertext terminates on a 4-byte boundary . Specifically , the Pad Length and Next Header fields must be right aligned within a 4-byte word , as illustrated in the ESP packet format figures above , to ensure that the ICV field ( if present ) is aligned on a 4-byte boundary . Padding beyond that required for the algorithm or alignment reasons cited above could be used to conceal the actual length of the payload , in support of TFC . However , the Padding field described is too limited to be effective for TFC and thus should not be used for that purpose . Instead , the separate mechanism described below ( see Section 2.7 ) should be used when TFC is required . The sender MAY add 0 to 255 bytes of padding . Inclusion of the Padding field in an ESP packet is optional , subject to the requirements noted above , but all implementations MUST support generation and consumption of padding . o For the purpose of ensuring that the bits to be encrypted are a multiple of the algorithm's block size ( first bullet above ), the padding computation applies to the Payload Data exclusive of any IV , but including the ESP trailer fields . If a combined algorithm mode requires transmission of the SPI and Sequence Number to effect integrity , e.g ., replication of the SPI and Sequence Number in the Payload Data , then the replicated versions of these data items , and any associated , ICV-equivalent data , are included in the computation of the pad length . ( If the ESN option is selected , the high-order 32 bits of the ESN also would enter into the computation , if the combined mode algorithm requires their transmission for integrity .) o For the purposes of ensuring that the ICV is aligned on a 4-byte boundary ( second bullet above ), the padding computation applies to the Payload Data inclusive of the IV , the Pad Length , and Next Header fields . If a combined mode algorithm is used , any replicated data and ICV-equivalent data are included in the Payload Data covered by the padding computation . If Padding bytes are needed but the encryption algorithm does not specify the padding contents , then the following default processing MUST be used . The Padding bytes are initialized with a series of ( unsigned , 1-byte ) integer values . The first padding byte appended to the plaintext is numbered 1 , with subsequent padding bytes making up a monotonically increasing sequence : 1 , 2 , 3 , .... When this padding scheme is employed , the receiver SHOULD inspect the Padding field . ( This scheme was selected because of its relative simplicity , ease of implementation in hardware , and because it offers limited protection against certain forms of  cut and paste  attacks in the absence of other integrity measures , if the receiver checks the padding values upon decryption .) If an encryption or combined mode algorithm imposes constraints on the values of the bytes used for padding , they MUST be specified by the RFC defining how the algorithm is employed with ESP . If the algorithm requires checking of the values of the bytes used for padding , this too MUST be specified in that RFC .	400	1
4303	Pad Length	The Pad Length field indicates the number of pad bytes immediately preceding it in the Padding field . The range of valid values is 0 to 255 , where a value of zero indicates that no Padding bytes are present . As noted above , this does not include any TFC padding bytes . The Pad Length field is mandatory .	400	0
4303	Next Header	The Next Header is a mandatory , 8-bit field that identifies the type of data contained in the Payload Data field , e.g ., an IPv4 or IPv6 packet , or a next layer header and data . The value of this field is chosen from the set of IP Protocol Numbers defined on the web page of the IANA , e.g ., a value of 4 indicates IPv4 , a value of 41 indicates IPv6 , and a value of 6 indicates TCP . To facilitate the rapid generation and discarding of the padding traffic in support of traffic flow confidentiality ( see Section 2.4 ), the protocol value 59 ( which means  no next header ) MUST be used to designate a  dummy  packet . A transmitter MUST be capable of generating dummy packets marked with this value in the next protocol field , and a receiver MUST be prepared to discard such packets , without indicating an error . All other ESP header and trailer fields ( SPI , Sequence Number , Padding , Pad Length , Next Header , and ICV ) MUST be present in dummy packets , but the plaintext portion of the payload , other than this Next Header field , need not be well-formed , e.g ., the rest of the Payload Data may consist of only random bytes . Dummy packets are discarded without prejudice . Implementations SHOULD provide local management controls to enable the use of this capability on a per-SA basis . The controls should allow the user to specify if this feature is to be used and also provide parametric controls; for example , the controls might allow an administrator to generate random-length or fixed-length dummy packets . DISCUSSION : Dummy packets can be inserted at random intervals to mask the absence of actual traffic . One can also  shape  the actual traffic to match some distribution to which dummy traffic is added as dictated by the distribution parameters . As with the packet length padding facility for Traffic Flow Security ( TFS ), the most secure approach would be to generate dummy packets at whatever rate is needed to maintain a constant rate on an SA . If packets are all the same size , then the SA presents the appearance of a constant bit rate data stream , analogous to what a link crypto would offer at layer 1 or 2 . However , this is unlikely to be practical in many contexts , e.g ., when there are multiple SAs active , because it would imply reducing the allowed bandwidth for a site , based on the number of SAs , and that would undermine the benefits of packet switching . Implementations SHOULD provide controls to enable local administrators to manage the generation of dummy packets for TFC purposes .	231	0
4303	Integrity Check Value-ICV   (variable)~	The Integrity Check Value is a variable-length field computed over the ESP header , Payload , and ESP trailer fields . Implicit ESP trailer fields ( integrity padding and high-order ESN bits , if applicable ) are included in the ICV computation . The ICV field is optional . It is present only if the integrity service is selected and is provided by either a separate integrity algorithm or a combined mode algorithm that uses an ICV . The length of the field is specified by the integrity algorithm selected and associated with the SA . The integrity algorithm specification MUST specify the length of the ICV and the comparison rules and processing steps for validation .	301	1
4306	Selector Length	Specifies the length of this Traffic Selector Substructure including the header .	100	0
4306	Start Port*	Value specifying the smallest port number allowed by this Traffic Selector . For protocols for which port is undefined , or if all ports are allowed , this field MUST be zero . For the ICMP protocol , the two one-octet fields Type and Code are treated as a single 16-bit integer ( with Type in the most significant eight bits and Code in the least significant eight bits ) port number for the purposes of filtering based on this field .	400	0
4306	End Port*	Value specifying the largest port number allowed by this Traffic Selector . For protocols for which port is undefined , or if all ports are allowed , this field MUST be 65535 . For the ICMP protocol , the two one-octet fields Type and Code are treated as a single 16-bit integer ( with Type in the most significant eight bits and Code in the least significant eight bits ) port number for the purposed of filtering based on this field .	400	0
5415	Radio MAC Address	This optional field contains the MAC address of the radio receiving the packet . Because the native wireless frame format to IEEE 802.3 format causes the MAC address of the WTP's radio to be lost , this field allows the address to be communicated to the AC . This field is only present if the ' M ' bit is set . The HLEN field assumes 4-byte alignment , and this field MUST be padded with zeroes ( 0x00 ) if it is not 4-byte aligned .	230	1
5415	Length	The length of the MAC address field . The formats and lengths specified in [ EUI-48 ] and [ EUI-64 ] are supported .	100	0
5415	MAC Address	The MAC address of the receiving radio .	230	1
5415	Wireless Specific Information	This optional field contains technology-specific information that may be used to carry per - packet wireless information . This field is only present if the ' W ' bit is set . The WBID field in the CAPWAP Header is used to identify the format of the Wireless-Specific Information optional field . The HLEN field assumes 4-byte alignment , and this field MUST be padded with zeroes ( 0x00 ) if it is not 4-byte aligned .	400	1
5415	Length	The 8-bit field contains the length of the data field , with a maximum size of 255 .	100	0
5415	Data	Wireless-specific information , defined by the wireless - specific binding specified in the CAPWAP Header's WBID field .	400	1
5415	Payload	This field contains the header for a CAPWAP Data Message or CAPWAP Control Message , followed by the data contained in the message .	400	1
5433	Code	The Code field is one octet and identifies the Type of EAP packet . EAP Codes are assigned as follows : 1 Request 2 Response 3 Success 4 Failure Since EAP only defines Codes 1-4 , EAP packets with other codes MUST be silently discarded by both authenticators and peers .	240	0
5433	Identifier	The Identifier field is one octet and aids in matching Responses with Requests .	231	0
7011	Version Number	Version of IPFIX to which this Message conforms . The value of this field is 0x000a for the current version , incrementing by one the version used in the NetFlow services export version 9	220	0
7011	Length	Total length of the IPFIX Message , measured in octets , including Message Header and Set(s ).	100	0

5320	R	the  Report Fragmentation  bit . Set to 1 if the ITE wishes to receive a report from the ETE if any IPv4 fragmentation occurs .	231	0
5320	M	the  More Segments  bit . Set to 1 if this SEAL protocol packet contains a non-final segment of a multi-segment mid-layer packet .	231	0
5320	RSV	a 2-bit field reserved for future use . Must be set to 0 for the purpose of this specification .	500	0
5326	Version number	( 4 bits ): MUST be set to the binary value 0000 for this version of the protocol .	220	0
5326	Segment type flags	( 4 bits ) The last 4 bits of the control byte in the segment header are flags that indicate the nature of the segment . In order ( most significant bit first ), these flags are CTRL , EXC , Flag 1 , and Flag 0 . A value of 0 in the CTRL ( Control ) flag identifies the segment as a data segment , while a value of 1 identifies it as a control segment . A data segment with the EXC ( Exception ) flag set to 0 is a red-part segment; a data segment with EXC set to 1 is a green-part segment . For a control segment , having the EXC flag set to 1 indicates that the segment pertains to session cancellation activity . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 1 indicates EOB . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 0 indicates data without any additional protocol significance . Any red-part data segment with either flag bit non-zero is a checkpoint . Any red-part data segment with Flag 1 set to 1 indicates the end of red-part .	301	0
5106	Identifier	The Identifier field is one octet and aids in matching Responses with Requests .	301	0
5106	Length	The Length field is two octets and indicates the length , in octets , of the EAP packet including the Code , Identifier , Length , and Data fields . Octets outside the range of the Length field should be treated as Data Link Layer padding and MUST be ignored upon reception . A message with the Length field set to a value larger than the number of received octets MUST be silently discarded .	100	0
5268	Code	The code field depends on the message type . It is used to create an additional level of message granularity .	231	0
5413	Length	Length ( two octets ): the length of the SLAPP message , including the entire SLAPP header	100	0
5414	Version	This field indicates the protocol version .	220	0
5414	M	The MAC-type field , ' M ', distinguishes between Local MAC WTPs and Split MAC WTPs . It is used to efficiently realize interoperability between WTPs of the two different designs . A ' 0 ' value indicates WiCoP exchanges with a Split MAC WTP while a ' 1 ' value indicates WiCoP exchanges with a Local MAC WTP . The presence of this classification bit in the WiCoP common header serves to expedite processing of WiCoP and WLAN traffic at the AC . With a single parsing of the WiCoP common header once , the AC will be able to determine the appropriate processing required for the particular WiCoP packet .	210	0
5414	D	The differentiator field , ' D ', is used to distinguish between WTP variants within a type of WTP design . The CAPWAP Architecture Taxonomy [ RFC4118 ] illustrates that the Split MAC design allows encryption/decryption to be performed at either the WTP or the AC . The Architecture Taxonomy also indicates that the Local MAC design allows authentication to take place at either the WTP or the AC . WiCoP acknowledges these major variants and accommodates them using the ' D ' field in conjunction with the ' M ' field . For a Split MAC WTP , the ' D ' field is used to indicate location of encryption/decryption while for a Local MAC WTP , the ' D ' field is used to indicate location of authentication . The following table highlights their usage .	210	0
5414	Length	This field specifies the length of the WiCoP payload following the header	100	0
5414	Msg Type	The message type field specifies the type of control message transported in the packet . The list of control messages is presented in Section 5.2.1 .	231	0
5086	... IPv4/IPv6 and UDP (demultiplexing layer) headers...	CESoPSN implementations working with IPv4 PSN MUST set the  Don't Fragment  flag in IP headers of the packets they generate .	231	1
5086	OPTIONAL	Fixed RTP Header ( see [ RFC3550 ])	100	0
5086	Packetized TDM data (Payload)... ...	All the services considered in this document are treated as sequences of  basic structures  ( see Section 3 above ). The payload of a CESoPSN packet always consists of a fixed number of octets filled , octet by octet , with the data contained in the corresponding consequent basic structures that preserve octet alignment between these structures and the packet payload boundaries , in accordance with the following rules	100	0
5096	Payload Proto	8-bit selector . Identifies the type of header immediately following the Mobility Header . Uses the same values as the IPv6 Next Header field [ 11 ]. This field is intended to be used by a future extension ( see Appendix B.1 ). Implementations conforming to this specification SHOULD set the payload protocol type to IPPROTO_NONE ( 59 decimal ).	231	0
5101	Length	Total length of the Set , in octets , including the Set Header , all records , and the optional padding .	100	0
5101	Observation Domain ID	A 32-bit identifier of the Observation Domain that is locally unique to the Exporting Process . The Exporting Process uses the Observation Domain ID to uniquely identify to the Collecting Process the Observation Domain that metered the Flows . It is RECOMMENDED that this identifier also be unique per IPFIX Device . Collecting Processes SHOULD use the Transport Session and the Observation Domain ID field to separate different export streams originating from the same Exporting Process . The Observation Domain ID SHOULD be 0 when no specific Observation Domain ID is relevant for the entire IPFIX Message , for example , when exporting the Exporting Process Statistics , or in case of a hierarchy of Collectors when aggregated Data Records are exported .	230	0
5106	Code	The Code field is one octet and identifies the Type of EAP packet . EAP Codes are assigned as follows : 1 Request 2 Response 3 Success 4 Failure Since EAP only defines Codes 1-4 , EAP packets with other codes MUST be silently discarded by both authenticators and peers .	240	0
5106	Type	The EAP Type for this EAP method is 49 .	220	0
5191	Reserved	This 16-bit field is reserved for future use . It MUST be set to zero and ignored by the receiver .	500	0
5191	Message Length	The Message Length field is two octets and indicates the length of the PANA message including the header fields .	100	0
5191	Flags	The Flags field is two octets . The following bits are assigned	301	0
5191	Message Type	The Message Type field is two octets , and it is used in order to communicate the message type with the message . Message Type allocation is managed by IANA [ IANAWEB ]	301	0
5191	AVPs	AVPs are a method of encapsulating information relevant to the PANA message . See Section 6.3 for more information on AVPs . Each AVP of type OctetString MUST be padded to align on a 32-bit boundary , while other AVP types align naturally . A number of zero-valued bytes are added to the end of the AVP Value field until a word boundary is reached . The length of the padding is not reflected in the AVP Length field [ RFC3588 ].	301	1
5219	C	Continuation flag ( 1 bit ): 1 , if the data following the ADU descriptor is a continuation of an ADU frame that was too large to fit within a single RTP packet; 0 otherwise .	210	0
5219	T	Descriptor Type flag ( 1 bit ): 0 if this is a 1-byte ADU descriptor; 1 if this is a 2-byte ADU descriptor .	210	0
5219	ADU size	( 6 or 14 bits ): The size ( in bytes ) of the ADU frame that will follow this ADU descriptor ( i.e ., NOT including the size of the descriptor itself ). A 2-byte ADU descriptor ( with a 14-bit  ADU size  field ) is used for ADU frame sizes of 64 bytes or more . For smaller ADU frame sizes , senders MAY alternatively use a 1-byte ADU descriptor ( with a 6-bit  ADU size  field ). Receivers MUST be able to accept an ADU descriptor of either size .	100	1
3550	synchronization source (SSRC) identifier	32 bits The SSRC field identifies the synchronization source . This identifier SHOULD be chosen randomly , with the intent that no two synchronization sources within the same RTP session will have the same SSRC identifier . An example algorithm for generating a random identifier is presented in Appendix A.6 . Although the probability of multiple sources choosing the same identifier is low , all RTP implementations must be prepared to detect and resolve collisions . Section 8 describes the probability of collision along with a mechanism for resolving collisions and detecting RTP-level forwarding loops based on the uniqueness of the SSRC identifier . If a source changes its source transport address , it must also choose a new SSRC identifier to avoid being interpreted as a looped source ( see Section 8.2 ).	231	0
3588	Version	Version This Version field MUST be set to 1 to indicate Diameter Version 1 .	220	0
3588	Message Length	Message Length The Message Length field is three octets and indicates the length of the Diameter message including the header fields .	100	0
3588	command flags	The Command Flags field is eight bits . The following bits are assigned : 0 1 2 3 4 5 6 7 +-+-+-+-+-+-+-+-+ |R P E T r r r r| +-+-+-+-+-+-+-+-+ R(equest ) - If set , the message is a request . If cleared , the message is an answer . P(roxiable ) - If set , the message MAY be proxied , relayed or redirected . If cleared , the message MUST be locally processed . E(rror ) - If set , the message contains a protocol error , and the message will not conform to the ABNF described for this command . Messages with the ' E ' bit set are commonly referred to as error messages . This bit MUST NOT be set in request messages . See Section 7.2 . T(Potentially re-transmitted message ) - This flag is set after a link failover procedure , to aid the removal of duplicate requests . It is set when resending requests not yet acknowledged , as an indication of a possible duplicate due to a link failure . This bit MUST be cleared when sending a request for the first time , otherwise the sender MUST set this flag . Diameter agents only need to be concerned about the number of requests they send based on a single received request; retransmissions by other entities need not be tracked . Diameter agents that receive a request with the T flag set , MUST keep the T flag set in the forwarded request . This flag MUST NOT be set if an error answer message ( e.g ., a protocol error ) has been received for the earlier message . It can be set only in cases where no answer has been received from the server for a request and the request is sent again . This flag MUST NOT be set in answer messages . r(eserved ) - these flag bits are reserved for future use , and MUST be set to zero , and ignored by the receiver .	231	0
3588	Command-Code	The Command-Code field is three octets , and is used in order to communicate the command associated with the message . The 24-bit address space is managed by IANA ( see Section 11.2.1).Command-Code values 16,777,214 and 16,777,215 ( hexadecimal values FFFFFE - FFFFFF ) are reserved for experimental use	301	0
3588	Hop-by-Hop Identifier	The Hop-by-Hop Identifier is an unsigned 32-bit integer field ( in network byte order ) and aids in matching requests and replies . The sender MUST ensure that the Hop-by-Hop identifier in a request is unique on a given connection at any given time , and MAY attempt to ensure that the number is unique across reboots . The sender of an Answer message MUST ensure that the Hop-by-Hop Identifier field contains the same value that was found in the corresponding request . The Hop-by-Hop identifier is normally a monotonically increasing number , whose start value was randomly generated . An answer message that is received with an unknown Hop-by-Hop Identifier MUST be discarded .	231	0
5792	Build Number	This field contains the build number for the product , if applicable . This may provide more granularity than the minor version number , as many builds may occur leading up to an official release , and all these builds may share a single major and minor version number . If unused or unknown , this field SHOULD be set to 0 .	220	0
5792	Service Pack Major	This field contains the major version number of the service pack for the product , if applicable . If unused or unknown , this field SHOULD be set to 0 .	220	0
5792	Service Pack Minor	This field contains the minor version number of the service pack for the product , if applicable . If unused or unknown , this field SHOULD be set to 0 .	220	0
5793	Version	This field indicates the version of the format for the PB-TNC message . This version is intended to allow for evolution of the PB-TNC protocol in a manner that can easily be detected by message recipients .	220	0
5793	D	When a Posture Broker Client is sending this message , the Directionality bit MUST be set to 0 . When a Posture Broker Server is sending this message , the Directionality bit MUST be set to 1 . This helps avoid any situation where two Posture Broker Clients or two Posture Broker Servers engage in a dialog . It also helps with debugging .	210	0
761	FIN	Control Bits : 8 bits ( from left to right ):	231	0
761	Checksum	16 bits The checksum field is the 16 bit one's complement of the one's complement sum of all 16 bit words in the header and text . If a segment contains an odd number of header and text octets to be checksummed , the last octet is padded on the right with zeros to form a 16 bit word for checksum purposes . The pad is not transmitted as part of the segment . While computing the checksum , the checksum field itself is replaced with zeros .	301	0
1583	Authentication	A 64-bit field for use by the authentication scheme .	400	0
1883	Hop Limit	8-bit unsigned integer . Decremented by 1 by each node that forwards the packet . The packet is discarded if Hop Limit is decremented to zero .	100	0
5320	RSV	a 2-bit field reserved for future use . Must be set to 0 for the purpose of this specification .	500	0
5326	Version number	( 4 bits ): MUST be set to the binary value 0000 for this version of the protocol .	220	0
5326	Segment type flags	( 4 bits ) The last 4 bits of the control byte in the segment header are flags that indicate the nature of the segment . In order ( most significant bit first ), these flags are CTRL , EXC , Flag 1 , and Flag 0 . A value of 0 in the CTRL ( Control ) flag identifies the segment as a data segment , while a value of 1 identifies it as a control segment . A data segment with the EXC ( Exception ) flag set to 0 is a red-part segment; a data segment with EXC set to 1 is a green-part segment . For a control segment , having the EXC flag set to 1 indicates that the segment pertains to session cancellation activity . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 1 indicates EOB . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 0 indicates data without any additional protocol significance . Any red-part data segment with either flag bit non-zero is a checkpoint . Any red-part data segment with Flag 1 set to 1 indicates the end of red-part .	301	0
5793	Reserved	This field is reserved . For this version of this specification , it MUST be set to 0 on transmission and ignored on reception . Future versions of this specification may allow senders to set some of these bits and recipients to interpret them .	500	0
5793	Remediation Parameters Vendor ID	The Remediation Parameters Vendor ID field identifies a vendor by using the SMI Private Enterprise Number ( PEN ). Any organization can receive its own unique PEN from IANA , the Internet Assigned Numbers Authority . The Remediation Parameters Vendor ID qualifies the Remediation Parameters Type field so that each vendor has 2^32 separate Remediation Parameters Types available for its use . Remediation Parameters Types standardized by the IETF are always used with the value zero ( 0 ) in this field .	400	0

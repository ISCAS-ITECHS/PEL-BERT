5440	Flags	Flags ( 5 bits ): No flags are currently defined . Unassigned bits are considered as reserved . They MUST be set to zero on transmission and MUST be ignored on receipt .	500	0
5440	Message-Type	Message-Type ( 8 bits ): The following message types are currently defined : Value Meaning 1 Open 2 Keepalive 3 Path Computation Request 4 Path Computation Reply 5 Notification 6 Error 7 Close	240	0
5440	Message-Length	Message-Length ( 16 bits ): total length of the PCEP message including the common header , expressed in bytes .	100	0
5533	Next Header	The payload that follows this header .	400	0
5533	P	A single bit to distinguish Shim6 Payload Extension headers from control messages .	231	0
5533	Receiver Context Tag	47-bit unsigned integer . Allocated by the receiver to identify the context .	231	0
5533	Type	7-bit unsigned integer . Identifies the actual message from the table below . Type codes 0-63 will not trigger R1bis messages on a missing context , while codes 64-127 will trigger R1bis .	231	0
5533	Type-specific	Part of the message that is different for different message types .	400	0
5533	Checksum	16-bit unsigned integer . The checksum is the 16-bit one's complement of the one's complement sum of the entire Shim6 header message , starting with the Shim6 Next Header field and ending as indicated by the Hdr Ext Len . Thus , when there is a payload following the Shim6 header , the payload is NOT included in the Shim6 checksum . Note that , unlike protocols like ICMPv6 , there is no pseudo-header checksum part of the checksum; this provides locator agility without having to change the checksum .	301	0
5533	R	1-bit field . Reserved for future use . Zero on transmit . MUST be ignored on receipt .	500	0
5533	Initiator Context Tag	47-bit field . The Context Tag that the initiator has allocated for the context .	400	0
5533	Initiator Nonce	32-bit unsigned integer . A random number picked by the initiator , which the responder will return in the R1 message .	400	0
5533	Options	Future protocol extensions might define additional options for this message . The C-bit in the option format defines how such a new option will be handled by an implementation .	231	1
6830	UDP Checksum	The ' UDP Checksum ' field SHOULD be transmitted as zero by an ITR for either IPv4 [ RFC0768 ] or IPv6 encapsulation [ UDP-TUNNELS ] [ UDP-ZERO ]. When a packet with a zero UDP checksum is received by an ETR , the ETR MUST accept the packet for decapsulation . When an ITR transmits a non-zero value for the UDP checksum , it MUST send a correctly computed value in this field . When an ETR receives a packet with a non-zero UDP checksum , it MAY choose to verify the checksum value . If it chooses to perform such verification , and the verification fails , the packet MUST be silently dropped . If the ETR chooses not to perform the verification , or performs the verification successfully , the packet MUST be accepted for decapsulation . The handling of UDP checksums for all tunneling protocols , including LISP , is under active discussion within the IETF . When that discussion concludes , any necessary changes will be made to align LISP with the outcome of the broader discussion .	301	0
6830	UDP Length	The ' UDP Length ' field is set for an IPv4-encapsulated packet to be the sum of the inner-header IPv4 Total Length plus the UDP and LISP header lengths . For an IPv6-encapsulated packet , the ' UDP Length ' field is the sum of the inner-header IPv6 Payload Length , the size of the IPv6 header ( 40 octets ), and the size of the UDP and LISP headers .	100	0
6830	N	The N-bit is the nonce-present bit . When this bit is set to 1 , the low-order 24 bits of the first 32 bits of the LISP header contain a Nonce . See Section 6.3.1 for details . Both N - and V-bits MUST NOT be set in the same packet . If they are , a decapsulating ETR MUST treat the ' Nonce/Map-Version ' field as having a Nonce value present .	210	0
6830	L	The L-bit is the ' Locator-Status-Bits ' field enabled bit . When this bit is set to 1 , the Locator-Status-Bits in the second 32 bits of the LISP header are in use .	210	0
6830	E	The E-bit is the echo-nonce-request bit . This bit MUST be ignored and has no meaning when the N-bit is set to 0 . When the N-bit is set to 1 and this bit is set to 1 , an ITR is requesting that the nonce value in the ' Nonce ' field be echoed back in LISP - encapsulated packets when the ITR is also an ETR . See Section 6.3.1 for details .	210	0
6830	V	The V-bit is the Map-Version present bit . When this bit is set to 1 , the N-bit MUST be 0 . Refer to Section 6.6.3 for more details . This bit indicates that the LISP header is encoded in this case as :	210	0
6830	I	The I-bit is the Instance ID bit . See Section 5.5 for more details . When this bit is set to 1 , the ' Locator-Status-Bits ' field is reduced to 8 bits and the high-order 24 bits are used as an Instance ID . If the L-bit is set to 0 , then the low-order 8 bits are transmitted as zero and ignored on receipt . The format of the LISP header would look like this :	210	0
6830	flags	The ' flags ' field is a 3-bit field reserved for future flag use . It MUST be set to 0 on transmit and MUST be ignored on receipt .	500	0
6830	Instance ID	An Instance ID can be carried in a LISP-encapsulated packet . An ITR that prepends a LISP header will copy a 24-bit value used by the LISP router to uniquely identify the address space . The value is copied to the ' Instance ID ' field of the LISP header , and the I-bit is set to 1 . VPN identifier could be used as a 24-bit Instance ID .	230	0
5584	X	Extension(X ): 1 bit Defined by the RTP profile used .	400	0
5584	CC	CSRC count(CC ): 4 bits The CSRC count contains the number of CSRC identifiers that follow the fixed header .	231	0
5584	M	Marker ( M ): 1 bit Set to 1 if the packet is the first packet after a silence period; otherwise , it MUST be set to 0 .	210	0
5584	PT	Payload Type ( PT ): 7 bits The assignment of an RTP payload type for this packet format is outside the scope of this document; it is specified by the RTP profile under which this payload format is used , or signaled dynamically out-of-band ( e.g ., using the Session Description Protocol ( SDP )).	400	0
5584	sequence number	sequence number : 16 bits A sequential number for the RTP packet . It ranges from 0 to 65535 and repeats itself periodically .	100	0
5584	synchronization source  identifier	SSRC : 32 bits The synchronization source identifier for the originator of this SR packet .	230	0
5584	contributing source (CSRC) identifiers .....	CSRC list : 0 to 15 items , 32 bits each . The CSRC count contains the number of CSRC identifiers that follow the fixed header .	230	1
5584	C	Continuation Flag ( C ) : 1 bit The packet that corresponds to the last part of the audio frame data in a fragmentation MUST have this bit set to 0; otherwise , it's set to 1 .	210	0
5651	V	LCT version number ( V ): 4 bits Indicates the LCT version number . The LCT version number for this specification is 1 .	220	0
5651	C	Congestion control flag ( C ): 2 bits C=0 indicates the Congestion Control Information ( CCI ) field is 32 bits in length . C=1 indicates the CCI field is 64 bits in length . C=2 indicates the CCI field is 96 bits in length . C=3 indicates the CCI field is 128 bits in length .	240	0
5651	PSI	Protocol-Specific Indication ( PSI ): 2 bits The usage of these bits , if any , is specific to each protocol instantiation that uses the LCT building block . If no protocol - instantiation-specific usage of these bits is defined , then a sender MUST set them to zero and a receiver MUST ignore these bits .	400	0
5651	Res	Reserved ( Res ): 2 bits These bits are reserved . In this version of the specification , they MUST be set to zero by senders and MUST be ignored by receivers .	500	0
5651	A	Close Session flag ( A ): 1 bit Normally , A is set to 0 . The sender MAY set A to 1 when termination of transmission of packets for the session is imminent . A MAY be set to 1 in just the last packet transmitted for the session , or A MAY be set to 1 in the last few seconds of packets transmitted for the session . Once the sender sets A to 1 in one packet , the sender SHOULD set A to 1 in all subsequent packets until termination of transmission of packets for the session . A received packet with A set to 1 indicates to a receiver that the sender will immediately stop sending packets for the session . When a receiver receives a packet with A set to 1 , the receiver SHOULD assume that no more packets will be sent to the session .	210	0
5651	B	Close Object flag ( B ): 1 bit Normally , B is set to 0 . The sender MAY set B to 1 when termination of transmission of packets for an object is imminent . If the TOI field is in use and B is set to 1 , then termination of transmission for the object identified by the TOI field is imminent . If the TOI field is not in use and B is set to 1 , then termination of transmission for the one object in the session identified by out-of-band information is imminent . B MAY be set to 1 in just the last packet transmitted for the object , or B MAY be set to 1 in the last few seconds that packets are transmitted for the object . Once the sender sets B to 1 in one packet for a particular object , the sender SHOULD set B to 1 in all subsequent packets for the object until termination of transmission of packets for the object . A received packet with B set to 1 indicates to a receiver that the sender will immediately stop sending packets for the object . When a receiver receives a packet with B set to 1 , then it SHOULD assume that no more packets will be sent for the object to the session .	210	0
5651	HDR_LEN	LCT header length ( HDR_LEN ): 8 bits Total length of the LCT header in units of 32-bit words . The length of the LCT header MUST be a multiple of 32 bits . This field can be used to directly access the portion of the packet beyond the LCT header , i.e ., to the first other header if it exists , or to the packet payload if it exists and there is no other header , or to the end of the packet if there are no other headers or packet payload .	100	0
5651	Codepoint	Codepoint ( CP ): 8 bits An opaque identifier that is passed to the packet payload decoder to convey information on the codec being used for the packet payload . The mapping between the codepoint and the actual codec is defined on a per session basis and communicated out-of-band as part of the session description information . The use of the CP field is similar to the Payload Type ( PT ) field in RTP headers as described in [ RFC3550 ].	230	0
5651	Congestion Control Information (CCI, length = 32*(C1) bits)...	Congestion Control Information ( CCI ): 32 , 64 , 96 , or 128 bits Used to carry congestion control information . For example , the congestion control information could include layer numbers , logical channel numbers , and sequence numbers . This field is opaque for the purpose of this specification .	400	1
5651	Transport Session Identifier (TSI, length = 32*S16*H bits)...	Transport Session Identifier ( TSI ): 0 , 16 , 32 , or 48 bits The TSI uniquely identifies a session among all sessions from a particular sender . The TSI is scoped by the IP address of the sender , and thus the IP address of the sender and the TSI together uniquely identify the session . Although a TSI in conjunction with the IP address of the sender always uniquely identifies a session , whether or not the TSI is included in the LCT header depends on what is used as the TSI value . If the underlying transport is UDP , then the 16-bit UDP source port number MAY serve as the TSI for the session . If the TSI value appears multiple times in a packet , then all occurrences MUST be the same value . If there is no underlying TSI provided by the network , transport or any other layer , then the TSI MUST be included in the LCT header . The TSI MUST be unique among all sessions served by the sender during the period when the session is active , and for a large period of time preceding and following when the session is active . A primary purpose of the TSI is to prevent receivers from inadvertently accepting packets from a sender that belong to sessions other than the sessions to which receivers are subscribed . For example , suppose a session is deactivated and then another session is activated by a sender and the two sessions use an overlapping set of channels . A receiver that connects and remains connected to the first session during this sender activity could possibly accept packets from the second session as belonging to the first session if the TSI for the two sessions were identical . The mapping of TSI field values to sessions is outside the scope of this document and is to be done out-of-band . The length of the TSI field is 32*S + 16*H bits . Note that the aggregate lengths of the TSI field plus the TOI field is a multiple of 32 bits .	230	1
5651	Transport Object Identifier (TOI, length = 32*O16*H bits)...	Transport Object Identifier ( TOI ): 0 , 16 , 32 , 48 , 64 , 80 , 96 , or 112 bits . This field indicates to which object within the session this packet pertains . For example , a sender might send a number of files in the same session , using TOI=0 for the first file , TOI=1 for the second one , etc . As another example , the TOI may be a unique global identifier of the object that is being transmitted from several senders concurrently , and the TOI value may be the output of a hash function applied to the object . The mapping of TOI field values to objects is outside the scope of this document and is to be done out-of-band . The TOI field MUST be used in all packets if more than one object is to be transmitted in a session , i.e ., the TOI field is either present in all the packets of a session or is never present . The length of the TOI field is 32*O + 16*H bits . Note that the aggregate length of the TSI field plus the TOI field is a multiple of 32 bits .	230	1
5651	Header Extensions (if applicable)...	Header Extensions are used in LCT to accommodate optional header fields that are not always used or have variable size .	400	1
5651	HET	Header Extension Type ( HET ): 8 bits The type of the Header Extension . This document defines a number of possible types . Additional types may be defined in future versions of this specification . HET values from 0 to 127 are used for variable-length Header Extensions . HET values from 128 to 255 are used for fixed-length 32-bit Header Extensions .	231	0
5651	HEL	Header Extension Length ( HEL ): 8 bits The length of the whole Header Extension field , expressed in multiples of 32-bit words . This field MUST be present for variable-length extensions ( HETs between 0 and 127 ) and MUST NOT be present for fixed-length extensions ( HETs between 128 and 255 ).	100	0
5651	Header Extension Content (HEC)	Header Extension Content ( HEC ): variable length The content of the Header Extension . The format of this sub - field depends on the Header Extension Type . For fixed-length Header Extensions , the HEC is 24 bits . For variable-length Header Extensions , the HEC field has variable size , as specified by the HEL field . Note that the length of each Header Extension field MUST be a multiple of 32 bits . Also note that the total size of the LCT header , including all Header Extensions and all optional header fields , cannot exceed 255 32-bit words .	400	1
5666	Version	Version number . This version of the RPC RDMA message protocol is 1 . The version number MUST be increased by 1 whenever the format of the RPC RDMA messages is changed .	220	0
5666	Message Type	Message type . o RDMA_MSG = 0 indicates that chunk lists and RPC message follow . o RDMA_NOMSG = 1 indicates that after the chunk lists there is no RPC message . In this case , the chunk lists provide information to allow the message proper to be transferred using RDMA Read or Write and thus is not appended to the RPC-over-RDMA header . o RDMA_MSGP = 2 indicates that a chunk list and RPC message with some padding follow . o RDMA_DONE = 3 indicates that the message signals the completion of a chunk transfer via RDMA Read . o RDMA_ERROR = 4 is used to signal any detected error(s ) in the RPC RDMA chunk encoding . Because the version number is encoded as part of this header , and the RDMA_ERROR message type is used to indicate errors , these first four fields and the start of the following message body MUST always remain aligned at these fixed offsets for all versions of the RPC-over-RDMA header .	240	0
5666	NULLs or Chunk Lists	For a message of type RDMA_MSG or RDMA_NOMSG , the Read and Write chunk lists follow . If the message type is RDMA_MSGP , then two additional fields that specify the padding alignment and threshold are inserted prior to the Read and Write chunk lists .	400	1
5666	RPC Call or Reply Msg	A header of message type RDMA_MSG or RDMA_MSGP MUST be followed by the RPC call or RPC reply message body , beginning with the XID . The XID in the RDMA_MSG or RDMA_MSGP header MUST match this .	400	1
5666	Long RPC Call or Reply Message	If the receiver gets an RPC-over-RDMA header with a message type of RDMA_NOMSG and finds an initial read chunk list entry with a zero XDR position , it allocates a registered buffer and issues an RDMA Read of the long RPC message into it . The receiver then proceeds to XDR decode the RPC message as if it had received it inline with the Send data . Further decoding may issue additional RDMA Reads to bring over additional chunks . Although the handling of long messages requires one extra network turnaround , in practice these messages will be rare if the posted receive buffers are correctly sized , and of course they will be non-existent for RDMA-aware upper layers .	400	1

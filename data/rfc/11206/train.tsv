3451	A	Close Session flag ( A ): 1 bit Normally , A is set to 0 . The sender MAY set A to 1 when termination of transmission of packets for the session is imminent . A MAY be set to 1 in just the last packet transmitted for the session , or A MAY be set to 1 in the last few seconds of packets transmitted for the session . Once the sender sets A to 1 in one packet , the sender SHOULD set A to 1 in all subsequent packets until termination of transmission of packets for the session . A received packet with A set to 1 indicates to a receiver that the sender will immediately stop sending packets for the session . When a receiver receives a packet with A set to 1 the receiver SHOULD assume that no more packets will be sent to the session .	210	0
3451	B	Normally , B is set to 0 . The sender MAY set B to 1 when termination of transmission of packets for an object is imminent . If the TOI field is in use and B is set to 1 then termination of transmission for the object identified by the TOI field is imminent . If the TOI field is not in use and B is set to 1 then termination of transmission for the one object in the session identified by out-of-band information is imminent . B MAY be set to 1 in just the last packet transmitted for the object , or B MAY be set to 1 in the last few seconds packets transmitted for the object . Once the sender sets B to 1 in one packet for a particular object , the sender SHOULD set B to 1 in all subsequent packets for the object until termination of transmission of packets for the object . A received packet with B set to 1 indicates to a receiver that the sender will immediately stop sending packets for the object . When a receiver receives a packet with B set to 1 then it SHOULD assume that no more packets will be sent for the object to the session .	210	0
3451	HDR_LEN	LCT header length ( HDR_LEN ): 8 bits Total length of the LCT header in units of 32-bit words . The length of the LCT header MUST be a multiple of 32-bits . This field can be used to directly access the portion of the packet beyond the LCT header , i.e ., to the first other header if it exists , or to the packet payload if it exists and there is no other header , or to the end of the packet if there are no other headers or packet payload .	100	0
3451	Codepoint	Codepoint ( CP ): 8 bits An opaque identifier which is passed to the packet payload decoder to convey information on the codec being used for the packet payload . The mapping between the codepoint and the actual codec is defined on a per session basis and communicated out-of-band as part of the session description information . The use of the CP field is similar to the Payload Type ( PT ) field in RTP headers as described in RFC 1889 [ 21 ].	231	0
5414	D	The differentiator field , ' D ', is used to distinguish between WTP variants within a type of WTP design . The CAPWAP Architecture Taxonomy [ RFC4118 ] illustrates that the Split MAC design allows encryption/decryption to be performed at either the WTP or the AC . The Architecture Taxonomy also indicates that the Local MAC design allows authentication to take place at either the WTP or the AC . WiCoP acknowledges these major variants and accommodates them using the ' D ' field in conjunction with the ' M ' field . For a Split MAC WTP , the ' D ' field is used to indicate location of encryption/decryption while for a Local MAC WTP , the ' D ' field is used to indicate location of authentication . The following table highlights their usage .	210	0
5414	C	This field distinguishes between a WiCoP control and WiCoP data packet . Each type of information is tunneled separately across the WiCoP tunnel interfaces between WTPs and the AC . A ' 0 ' value for the ' C ' field indicates a data packet , while a ' 1 ' value indicates a control packet . The ' C ' field is also used to assign WiCoP packets to distinct data and control tunnels between the AC and WTP . WiCoP also maintains logical groups in WLANs with the ' C ' field .	210	0
4302	Next Header	The Next Header is an 8-bit field that identifies the type of the next payload after the Authentication Header . The value of this field is chosen from the set of IP Protocol Numbers defined on the web page of Internet Assigned Numbers Authority ( IANA ). For example , a value of 4 indicates IPv4 , a value of 41 indicates IPv6 , and a value of 6 indicates TCP .	231	0
4302	Payload Len	This 8-bit field specifies the length of AH in 32-bit words ( 4-byte units ), minus  2 . Thus , for example , if an integrity algorithm yields a 96-bit authentication value , this length field will be  4  ( 3 32-bit word fixed fields plus 3 32-bit words for the ICV , minus 2 ). For IPv6 , the total length of the header must be a multiple of 8-octet units . ( Note that although IPv6 [ DH98 ] characterizes AH as an extension header , its length is measured in 32-bit words , not the 64-bit words used by other IPv6 extension headers .) See Section 2.6 ,  Integrity Check Value ( ICV ), for comments on padding of this field , and Section 3.3.3.2.1 ,  ICV Padding .	100	0
5414	Msg Element Length	This field specifies the length in bytes of the subsequent WiCoP control message element .	100	0
5415	Version	A 4-bit field that contains the version of CAPWAP used in this packet . The value for this specification is zero ( 0 ).	220	0
5415	Type	A 4-bit field that specifies the payload type that follows the UDP header . The following values are supported :	231	0
5415	HLEN	A 5-bit field containing the length of the CAPWAP transport header in 4-byte words ( similar to IP header length ). This length includes the optional headers .	100	0
5415	RID	A 5-bit field that contains the Radio ID number for this packet , whose value is between one ( 1 ) and 31 . Given that MAC Addresses are not necessarily unique across physical radios in a WTP , the Radio Identifier ( RID ) field is used to indicate with which physical radio the message is associated .	230	0
5415	WBID	A 5-bit field that is the wireless binding identifier . The identifier will indicate the type of wireless packet associated with the radio . The following values are defined : 0 - Reserved 1 - IEEE 802.11 2 - Reserved 3 - EPCGlobal [ EPCGlobal ]	240	0
5415	T	The Type ' T ' bit indicates the format of the frame being transported in the payload . When this bit is set to one ( 1 ), the payload has the native frame format indicated by the WBID field . When this bit is zero ( 0 ), the payload is an IEEE 802.3 frame .	210	0
5415	F	The Fragment ' F ' bit indicates whether this packet is a fragment . When this bit is one ( 1 ), the packet is a fragment and MUST be combined with the other corresponding fragments to reassemble the complete information exchanged between the WTP and AC .	210	0
5415	L	The Last ' L ' bit is valid only if the ' F ' bit is set and indicates whether the packet contains the last fragment of a fragmented exchange between WTP and AC . When this bit is one ( 1 ), the packet is the last fragment . When this bit is ( zero ) 0 , the packet is not the last fragment .	210	0
5415	W	The Wireless ' W ' bit is used to specify whether the optional Wireless Specific Information field is present in the header . A value of one ( 1 ) is used to represent the fact that the optional header is present .	210	0
5415	M	The Radio MAC ' M ' bit is used to indicate that the Radio MAC Address optional header is present . This is used to communicate the MAC address of the receiving radio .	210	0
5415	K	The Keep-Alive ' K ' bit indicates the packet is a Data Channel Keep-Alive packet . This packet is used to map the data channel to the control channel for the specified Session ID and to maintain freshness of the data channel . The ' K ' bit MUST NOT be set for data packets containing user data .	210	0
5415	Flags	A set of reserved bits for future flags in the CAPWAP Header . All implementations complying with this protocol MUST set to zero any bits that are reserved in the version of the protocol supported by that implementation . Receivers MUST ignore all bits not defined for the version of the protocol they support .	500	0
4165	Spare	The Spare field SHOULD be set to all zeroes ( 0's ) by the sender and ignored by the receiver . The Spare field SHOULD NOT be used for proprietary information .	231	0
4165	Message Class	The following List contains the valid Message Classes : Value ( decimal ) Message Class --------- ------------- 11 M2PA Messages Other values are invalid for M2PA .	231	0
4165	Message Type	The following list contains the message types for the defined messages . Value ( decimal ) Message Type --------- ------------- 1 User Data 2 Link Status Other values are invalid .	240	0
4204	Vers	Protocol version number . This is version 1 .	220	0
4204	Flags	The following bit-values are defined . All other bits are reserved and should be sent as zero and ignored on receipt . 0x01 : ControlChannelDown 0x02 : LMP Restart This bit is set to indicate that a nodal failure has occurred and the LMP control state has been lost . This flag may be reset to 0 when a Hello message is received with RcvSeqNum equal to the local TxSeqNum .	240	0
4204	Msg Type	The following values are defined . All other values are reserved 1 = Config 2 = ConfigAck 3 = ConfigNack	240	0
4204	LMP Length	The total length of this LMP message in bytes , including the common header and any variable-length objects that follow .	100	1
4233	Version	The version field contains the version of the IUA adaptation layer . The supported versions are the following : Value Version ----- ------- 1 Release 1.0	220	0
4233	Reserved	The Reserved field is 8 bits . It SHOULD be set to all ' 0's and ignored by the receiver .	231	0
4233	Message Class	The following list contains the valid Message Classes : Message Class : 8 bits ( unsigned integer ) 0 Management ( MGMT ) Message 1 Reserved for Other SIGTRAN Adaptation Layer 2 Reserved for Other SIGTRAN Adaptation Layers 3 ASP State Maintenance ( ASPSM ) Messages 4 ASP Traffic Maintenance ( ASPTM ) Messages 5 Q.921/Q.931 Boundary Primitives Transport ( QPTM ) Messages 6 Reserved for Other SIGTRAN Adaptation Layer 7 Reserved for Other SIGTRAN Adaptation Layer 8 Reserved for Other SIGTRAN Adaptation Layer 9 to 127 Reserved by the IETF 128 to 255 Reserved for IETF-Defined Message Class extensions	240	0
4233	Message Type	The following list contains the message names for the defined messages . Q.921/Q.931 Boundary Primitives Transport ( QPTM ) Messages 0 Reserved 1 Data Request Message 2 Data Indication Message 3 Unit Data Request Message 4 Unit Data Indication Message 5 Establish Request 6 Establish Confirm 7 Establish Indication 8 Release Request 9 Release Confirm 10 Release Indication 11 to 127 Reserved by the IETF 128 to 255 Reserved for IETF-Defined QPTM extensions	240	0
4233	Message Length	The Message Length defines the length of the message in octets , including the Common Header . The Message Length MUST include parameter padding bytes , if any . Note : A receiver SHOULD accept the message whether or not the final parameter padding is included in the message length .	100	0
4271	Length	This 2-octet unsigned integer indicates the total length of the message , including the header in octets . Thus , it allows one to locate the ( Marker field of the ) next message in the TCP stream . The value of the Length field MUST always be at least 19 and no greater than 4096 , and MAY be further constrained , depending on the message type .  padding  of extra data after the message is not allowed . Therefore , the Length field MUST have the smallest value required , given the rest of the message .	100	0
4271	Type	This 1-octet unsigned integer indicates the type code of the message . This document defines the following type codes : 1 - OPEN 2 - UPDATE 3 - NOTIFICATION 4 - KEEPALIVE [ RFC2918 ] defines one more type code .	240	0
4286	Type	The Type field identifies the message as an Advertisement . It is set to 0x30 for IPv4 and 151 for IPv6 .	240	0
4286	Checksum	The checksum field is set as follows : 1 . For IPv4 it is the 16-bit one's complement of the one's complement sum of the IGMP message , starting with the Type field . For computing the checksum , the checksum field is set to 0 . 2 . For IPv6 it is ICMPv6 checksum as specified in [ 6 ].	400	0
4286	Query Interval	The Query Interval field is set to the Query Interval value ( in seconds ) in use by IGMP or MLD on the interface . If IGMP or MLD is not enabled on the advertising interface , this field MUST be set to 0 . Note that this is the Querier's Query Interval ( QQI ), not the Querier's Query Interval Code ( QQIC ) as specified in the IGMP/MLD specifications .	400	0
4286	Robustness Variable	This field is set to the Robustness Variable in use by IGMPv2 [ 2 ], IGMPv3 [ 7 ], or MLD [ 8 ] [ 9 ] on the advertising interface . If IGMPv1 is in use or no group management protocol is enabled on the interface , this field MUST be set to 0 .	231	0
4302	RESERVED	This 16-bit field is reserved for future use . It MUST be set to  zero  by the sender , and it SHOULD be ignored by the recipient . ( Note that the value is included in the ICV calculation , but is otherwise ignored by the recipient .)	500	0
5413	Type	Type ( 1 octet ): the type of SLAPP message	231	0
5413	Length	Length ( two octets ): the length of the SLAPP message , including the entire SLAPP header	100	0
5414	Version	This field indicates the protocol version .	220	0
5414	M	The MAC-type field , ' M ', distinguishes between Local MAC WTPs and Split MAC WTPs . It is used to efficiently realize interoperability between WTPs of the two different designs . A ' 0 ' value indicates WiCoP exchanges with a Split MAC WTP while a ' 1 ' value indicates WiCoP exchanges with a Local MAC WTP . The presence of this classification bit in the WiCoP common header serves to expedite processing of WiCoP and WLAN traffic at the AC . With a single parsing of the WiCoP common header once , the AC will be able to determine the appropriate processing required for the particular WiCoP packet .	210	0
5414	R	The retransmission field , ' R ', is used to differentiate between the first and subsequent transmissions of WiCoP packets . The ' R ' field is used for critical WiCoP packets such as those relating to security key exchanges . A ' 0 ' value for the ' R ' field indicates the first transmission of a WiCoP packet , while a ' 1 ' value indicates a retransmission .	210	0
5414	E	The encryption field , ' E ', is used to indicate if the WiCoP packet is encrypted between the AC and WTPs . The ' E ' field is used for those WiCoP packets that are exchanged during initialization . A ' 0 ' value indicates the WiCoP packet is unencrypted , while a ' 1 ' value indicates the packet is encrypted .	210	0
5414	F	The fragmentation field indicates if the packet is a fragment of a larger packet . A ' 0 ' value indicates a non-fragmented packet while a ' 1 ' value indicates a fragmented packet . The ' F ', ' L ', ' Fragment ID ', and ' Fragment No .' fields are used together .	210	0
5414	L	This field is used to indicate the last fragment of a larger packet . It is only valid when the ' F ' field has a ' 1 ' value . A ' 0 ' value for the ' L ' field indicates the last fragment of a larger packet while a ' 1 ' value indicates an intermediate fragment of a larger packet . The ' F ', ' L ', ' Fragment ID ', and ' Fragment No .' fields are used together .	210	0
5414	Length	This field specifies the length of the WiCoP payload following the header	100	0
5414	Msg Type	The message type field specifies the type of control message transported in the packet . The list of control messages is presented in Section 5.2.1 .	231	0
3549	Netlink message header	The Netlink message header is generic for all services,whereas the IP Service Template header is specific to a service.Each IP Service then carries parameterization data ( CPC->FEC direction ) or response(FEC->CPC direction).These parameterizations are in TLV ( Type-Length-Value ) format and are unique to the service .	231	0
3549	Length	32 bits . The length of the message in bytes , including the header .	100	0
3549	Error code	integer ( typically 32 bits ). An error code of zero indicates that the message is an ACK response . An ACK response message contains the original Netlink message header , which can be used to compare against ( sent sequence numbers , etc ). A non-zero error code message is equivalent to a Negative ACK ( NACK ). In such a situation , the Netlink data that was sent down to the kernel is returned appended to the original Netlink message header . An error code printable via the perror () is also set ( not in the message header , rather in the executing environment state variable ).	301	0
3549	Device Type	16 bit . This defines the type of the link . The link could be Ethernet , a tunnel , etc . We are interested only in IPv4 , although the link type is L3 protocol-independent .	231	0
3549	Interface Index	32 bit . Uniquely identifies interface .	231	0
1970	Reserved	These fields are unused . They MUST be initialized to zero by the sender and MUST be ignored by the receiver .	500	0
5096	MH Type	8-bit selector . Identifies the particular mobility message in question . Current values are specified in Section 6.1.2 and onward . An unrecognized MH Type field causes an error indication to be sent .	230	0
5096	Reserved	8-bit field reserved for future use . The value MUST be initialized to zero by the sender , and MUST be ignored by the receiver .	500	0
5793	Remediation Parameters	The Remediation Parameters field contains the actual remediation parameters carried in this PB-TNC message . The length of this field can be determined by subtracting the length of the fixed - length fields at the start of the PB-TNC message ( the fields Flags , PB-TNC Vendor ID , PB-TNC Message Type , and PB-TNC Message Length ) and the fixed-length fields at the start of the PB - Remediation-Parameters message ( Reserved , Remediation Parameters Vendor ID , and Remediation Parameters Type ) from the message length contained in the PB-TNC Message Length field . The length of these fixed-length fields is 20 octets . Therefore , any Posture Broker Client that receives a PB-Remediation-Parameters message with a PB-TNC Message Length field whose value is less than 20 MUST consider this a malformed message . The Posture Broker Client MUST respond with a fatal Invalid Parameter error code in a CLOSE batch .	400	1
5793	Remediation String Length	The Remediation String Length contains the length of the Remediation String field in octets .	100	0
5793	Remediation String	The Remediation String field MUST contain a UTF-8 [ 6 ] encoded string . This string contains human-readable instructions for remediation that MAY be displayed to the user by the Posture Posture Broker Client receives a Reason String that does contain a NUL termination , it MUST respond with a fatal Invalid Parameter error in a CLOSE batch . Broker Client . NUL termination MUST NOT be included . If a	400	1
5793	Lang Code Len	The Lang Code Len field contains the length of the Remediation String Lang Code field in octets . This value may be set to zero to indicate that the language code for the Remediation String field is not known .	100	0
5793	Remediation String Lang Code	The Remediation String Lang Code field contains a US-ASCII string composed of a well-formed RFC 4646 [ 3 ] language tag that indicates the language(s ) used in the Remediation String in the Remediation Parameters field . A zero-length string may be sent for this field ( essentially omitting this field ) to indicate that the language code for the Remediation String field is not known .	231	1
5793	Flags	This field defines flags relating to the error . Bit 0 of this flags field ( the most significant bit ) is known as the FATAL flag . If the FATAL bit is cleared ( value 0 ), the Posture Broker Client or Posture Broker Server that receives this PB-TNC message SHOULD process this error and then continue with the exchange . If the FATAL flag is set ( value 1 ), the Posture Broker Client or Posture Broker Server that receives this PB-TNC message MUST terminate the exchange after processing the error . In addition , any Posture Broker Client or Posture Broker Server that sends a fatal error MUST NOT process the batch that caused the error and MUST terminate the exchange after sending the batch containing the error report . A PB-Error message with the FATAL flag set MUST always be sent in a CLOSE batch since the sender will be terminating the exchange immediately after sending the batch .	231	0
5793	Error Code Vendor ID	The Error Code Vendor ID field identifies a vendor by using the SMI Private Enterprise Number ( PEN ). Any organization can receive its own unique PEN from IANA , the Internet Assigned Numbers Authority . The Error Code Vendor ID qualifies the Error Code field so that each vendor has 2^16 separate Error Codes available for its use . Error codes standardized by the IETF are always used with the value zero ( 0 ) in this field . For detailed descriptions of those messages , see the next few subsections .	231	0
5793	Error Code	The Error Code field identifies the type of error being signaled with this message . The format of the Error Parameters field depends on the value of the Error Code Vendor ID and the Error Code . However , any recipient that does not understand a particular error code can process the error fairly well by using the FATAL flag to determine whether the error is fatal and the PB - TNC Message Length to skip over the Error Parameters field ( or log it ).	231	0
5793	Reserved	The Reserved bits MUST be set to 0 on transmission and ignored on reception .	500	0
5793	Reason String Length	The Reason String Length field contains the length of the Reason String field in octets .	100	0
5793	Reason String	The Reason String field contains a UTF-8 encoded string that provides a human-readable reason for the Posture Broker Server's assessment decision . NUL termination MUST NOT be included . If a Posture Broker Client receives a Reason String that does contain a NUL termination , it MUST respond with a fatal Invalid Parameter error code in a CLOSE batch . A zero-length string MUST NOT be sent since this is the same as sending no reason string at all , leaving the reason unspecified .	400	1
5793	Lang Code Len	The Lang Code Len field contains the length of the Reason String Language Code field in octets .	100	0
5793	Reason String Language Code	The Reason String Language Code field contains a US-ASCII string containing a well-formed RFC 4646 [ 3 ] language tag that indicates the language(s ) used in the Reason String in this message . NUL termination MUST NOT be included in this field . A zero-length string MAY be sent for this field ( essentially omitting this field ) to indicate that the language code for the reason string is not known .	231	1
5798	Source Address	This is the primary IPv4 address of the interface the packet is being sent from .	230	0
5798	Destination Address	The IPv4 multicast address as assigned by the IANA for VRRP is : 224.0.0.18 This is a link-local scope multicast address . Routers MUST NOT forward a datagram with this destination address , regardless of its TTL .	230	0
5798	Protocol	The IPv4 protocol number assigned by the IANA for VRRP is 112 ( decimal ).	231	0
5798	Next Header	The IPv6 Next Header protocol assigned by the IANA for VRRP is 112 ( decimal ).	231	0
5798	Version	The version field specifies the VRRP protocol version of this packet .	220	0
5798	Type	The type field specifies the type of this VRRP packet . The only packet type defined in this version of the protocol is : 1 ADVERTISEMENT A packet with unknown type MUST be discarded .	231	0
5798	Virtual Rtr ID	The Virtual Rtr ID field identifies the virtual router this packet is reporting status for .	230	0
5798	Priority	The priority field specifies the sending VRRP router's priority for the virtual router . Higher values equal higher priority . This field is an 8-bit unsigned integer field . The priority value for the VRRP router that owns the IPvX address associated with the virtual router MUST be 255 ( decimal ). VRRP routers backing up a virtual router MUST use priority values between 1-254 ( decimal ). The default priority value for VRRP routers backing up a virtual router is 100 ( decimal ). The priority value zero ( 0 ) has special meaning , indicating that the current Master has stopped participating in VRRP . This is used to trigger Backup routers to quickly transition to Master without having to wait for the current Master to time out .	230	0
760	Protocol	8 bits This field indicates the next level protocol used in the data portion of the internet datagram . The values for various protocols are specified in reference [ 6 ].	231	0
760	Header Checksum	16 bits A checksum on the header only . Since some header fields may change ( e.g ., time to live ), this is recomputed and verified at each point that the internet header is processed .	301	0
760	Source Address	32 bits The source address . The first octet is the Source Network , and the following three octets are the Source Local Address .	230	0
760	Destination Address	32 bits The destination address . The first octet is the Destination Network , and the following three octets are the Destination Local Address .	230	0
760	Options	variable The option field is variable in length . There may be zero or more options . There are two cases for the format of an option :	400	1
761	Source Port	16 bits The source port number .	230	0
761	Destination Port	16 bits The destination port number .	230	0
761	Reserved	6 bits Reserved for future use . Must be zero .	500	0
761	URG	Control Bits : 8 bits ( from left to right ):	231	0
761	ACK	Control Bits : 8 bits ( from left to right ):	231	0
761	EOL	Control Bits : 8 bits ( from left to right ):	231	0
761	RST	Control Bits : 8 bits ( from left to right ):	231	0
761	SYN	Control Bits : 8 bits ( from left to right ):	231	0
1967	PPP Protocol	The PPP Protocol field is described in the Point-to-Point Protocol Encapsulation [ 1 ]. When the LZS-DCP compression protocol is successfully negotiated by the PPP Compression Control Protocol [ 2 ], the value is 00FD or 00FB hex . This value MAY be compressed when Protocol-Field-Compression is negotiated .	400	0
1967	DCP-Header	The DCP-Header is nominally one octet in length , but may be extended through the use of the extension bit .	400	0
1967	(History Number)	The number of the compression history which was used , ranging from 1 to the negotiated value in the History Count field . If the negotiated History Count is less than 2 , this field is removed . If the negotiated History Count is 2 or more , but less than 256 , this field is 1 octet . If 256 or more histories are negotiated , this field is 2 octets , most significant octet first . If multiple histories are used in one direction on a link , the history number field MUST be present on all packets in both directions , and sized according to the largest number of histories in either direction . If multiple histories are used , this field MUST be present in uncompressed as well as compressed packets .	100	0
1967	Data	The data field MUST contain a single datagram in either compressed or uncompressed form , depending on the state of the C/U bit in the Header . This length of this field is always be an integer number of octets . This field is required in all packets that do not have the R-R bit set to  1 . If the C/U bit is set to  0 , the data field contains the uncompressed form of the datagram . If the C/U bit is set to  1 , the form of the data field is one block of compressed data as defined in 3.2 of X3.241-1994 , with the following exceptions : 1 ) the end marker may be followed with additional octets containing only zeros; 2 ) if the final octet in the block of compressed data has a value of  0 , then it MAY be removed from the data field . There is only one end marker per block of compressed data .	400	1
1967	LCB	Longitudinal Check Byte The LCB field is one octet in length , and if present MUST be the last octet in the data compression packet . When the check-mode field is set to  LCB  or  Sequence Number + LCB , this field MUST be present in all packets where the data field contains compressed data . This field MUST NOT be present in data compression packets where the data field contains uncompressed data . This field contains the result of the LCB calculation , in accordance with the following paragraph . The LCB octet is the Exclusive-OR of FF(hex ) and each octet of the uncompressed datagram ( prior to the compression transformation ). On receipt , the receiver computes the Exclusive-OR of FF(hex ) and each octet of the decompressed packet . If this value does not match the received LCB , then a receive failure for that history has occurred . The receive failure is handled according to the history synchronization procedure in section 3.5 .	301	0
1970	Type	4	240	0
1970	Length	The length of the option in units of 8 octets .	100	0
1970	IP header	Redirected Header option is used in Redirect messages and contains all or part of the packet that is being redirected .	231	1
1970	data	original packet truncated to ensure that the size of the redirect message does not exceed 576 octets .	400	1
2328	AuType	Identifies the authentication procedure to be used for the packet . Authentication is discussed in Appendix D of the specification . Consult Appendix D for a list of the currently defined authentication types .	240	0
2328	Authentication	A 64-bit field for use by the authentication scheme . See Appendix D for details .	400	0
2340	COS	The Class of Service field is used to provide routing class of service . The COS field also affects the Emission Priority of the packet in the scheduler .	231	0
2473	Tun Encap Lim	8 bit unsigned integer . The Tunnel Encapsulation Limit option specifies how many additional levels of encapsulation are permitted to be prepended to the packet -- or , in other words , how many further levels of nesting the packet is permitted to undergo -- not counting the encapsulation in which the option itself is contained . For example , a Tunnel Encapsulation Limit option containing a limit value of zero means that a packet carrying that option may not enter another tunnel before exiting the current tunnel .	100	0
2641	Destination address	This 6-octet field contains the Media Access Control ( MAC ) address of the multicast channel over which all switches in the fabric receive ISMP packets . The destination address fields of all ISMP packets contain a value of 01-00-1D-00-00-00 .	230	0
2641	Source address	This 6-octet field contains the physical ( MAC ) address of the switch originating the ISMP packet .	230	0
2641	Type	This 2-octet field identifies the type of data carried within the frame . The type field of ISMP packets contains the value 0x81FD .	240	0
2641	ISMP Version	This 2-octet field contains the version number of the InterSwitch Message Protocol to which this ISMP packet adheres . The VlanHello protocol uses ISMP Version 3.0 .	220	0
2641	ISMP message type	This 2-octet field contains a value indicating which type of ISMP message is contained within the message body . VlanHello Interswitch Keepalive messages have a message type of 2 .	240	0
2641	Sequence number	This 2-octet field contains an internally generated sequence number used by the various protocol handlers for internal synchronization of messages .	231	0
2641	Code length	This 1-octet field contains the number of octets in the Authentication code field of the message .	100	0
2641	Authentication code	This variable-length field contains an encoded value used for authentication of the ISMP message .	301	1
2643	Destination address	This 4-octet field specifies the type of address contained in the structure .	230	0
2643	Source address	This 1-octet field contains the length of the value of the address .	230	0
2643	Type	This 2-octet field identifies the type of data carried within the frame . Except where otherwise noted , the type field of ISMP packets contains the value 0x81FD .	240	0
2643	Version	This 2-octet field contains the version number of the InterSwitch Message Protocol to which this ISMP packet adheres . This document describes ISMP Version 2.0 .	220	0
2643	ISMP message type	This 2-octet field contains a value indicating which type of ISMP message is contained within the message body . The following table lists each ISMP message , along with its message type and the section within this document that describes the message in detail : Message Name Type Description Interswitch Link State message 3 See note below Interswitch BPDU message 4 Section 6.2 Interswitch Remote Blocking message 4 Section 6.3 Interswitch Resolve message 5 Section 6.4 Interswitch New User message 5 Section 6.5 Interswitch Tag-Based Flood message 7 Section 6.6 Interswitch Tap/Untap message 8 Section 6.7	240	0
2643	Sequence number	This 2-octet field contains an internally generated sequence number used by the various protocol handlers for internal synchronization of messages .	231	0
2661	Tunnel ID	Tunnel ID indicates the identifier for the control connection . L2TP tunnels are named by identifiers that have local significance only . That is , the same tunnel will be given different Tunnel IDs by each end of the tunnel . Tunnel ID in each message is that of the intended recipient , not the sender . Tunnel IDs are selected and exchanged as Assigned Tunnel ID AVPs during the creation of a tunnel .	231	0
3451	Header Extensions	Header Extensions are used in LCT to accommodate optional header fields that are not always used or have variable size .	400	1
3489	STUN Message Type	The Message Types can take on the following values : 0x0001 : Binding Request 0x0101 : Binding Response 0x0111 : Binding Error Response 0x0002 : Shared Secret Request 0x0102 : Shared Secret Response 0x0112 : Shared Secret Error Response	240	0
3489	Message Length	The message length is the count , in bytes , of the size of the message , not including the 20 byte header .	100	0
3489	Transaction ID	The transaction ID is a 128 bit identifier . It also serves as salt to randomize the request and the response . All responses carry the same identifier as the request they correspond to	231	0
5086	... IPv4/IPv6 and UDP (demultiplexing layer) headers...	CESoPSN implementations working with IPv4 PSN MUST set the  Don't Fragment  flag in IP headers of the packets they generate .	231	1
5086	OPTIONAL	Fixed RTP Header ( see [ RFC3550 ])	100	0
5086	Packetized TDM data (Payload)... ...	All the services considered in this document are treated as sequences of  basic structures  ( see Section 3 above ). The payload of a CESoPSN packet always consists of a fixed number of octets filled , octet by octet , with the data contained in the corresponding consequent basic structures that preserve octet alignment between these structures and the packet payload boundaries , in accordance with the following rules	100	0
5096	Payload Proto	8-bit selector . Identifies the type of header immediately following the Mobility Header . Uses the same values as the IPv6 Next Header field [ 11 ]. This field is intended to be used by a future extension ( see Appendix B.1 ). Implementations conforming to this specification SHOULD set the payload protocol type to IPPROTO_NONE ( 59 decimal ).	231	0
5096	Header Len	8-bit unsigned integer , representing the length of the Mobility Header in units of 8 octets , excluding the first 8 octets . The length of the Mobility Header MUST be a multiple of 8 octets .	100	0
5096	Checksum	16-bit unsigned integer . This field contains the checksum of the Mobility Header . The checksum is calculated from the octet string consisting of a  pseudo-header  followed by the entire Mobility Header starting with the Payload Proto field . The checksum is the 16-bit one's complement of the one's complement sum of this string . The pseudo-header contains IPv6 header fields , as specified in Section 8.1 of RFC 2460 [ 11 ]. The Next Header value used in the pseudo-header is 2 . The addresses used in the pseudo-header are the addresses that appear in the Source and Destination Address fields in the IPv6 packet carrying the Mobility Header . Note that the procedures of calculating upper layer checksums while away from home described in Section 11.3.1 apply even for the Mobility Header . If a mobility message has a Home Address destination option , then the checksum calculation uses the home address in this option as the value of the IPv6 Source Address field . The type 2 routing header is treated as explained in [ 11 ]. The Mobility Header is considered as the upper layer protocol for the purposes of calculating the pseudo-header . The Upper-Layer Packet Length field in the pseudo-header MUST be set to the total length of the Mobility Header .	301	0
5096	Message Data	The ' Message Data ' field carries the data specific to the experimental protocol extension . The total length of the message is indicated by the ' Header Len ' field in the Mobility Header .	240	1
5101	Version Number	Version of Flow Record format exported in this message . The value of this field is 0x000a for the current version , incrementing by one the version used in the NetFlow services export version 9 [ RFC3954 ].	220	0
5101	Length	Total length of the Set , in octets , including the Set Header , all records , and the optional padding .	100	0
5101	Observation Domain ID	A 32-bit identifier of the Observation Domain that is locally unique to the Exporting Process . The Exporting Process uses the Observation Domain ID to uniquely identify to the Collecting Process the Observation Domain that metered the Flows . It is RECOMMENDED that this identifier also be unique per IPFIX Device . Collecting Processes SHOULD use the Transport Session and the Observation Domain ID field to separate different export streams originating from the same Exporting Process . The Observation Domain ID SHOULD be 0 when no specific Observation Domain ID is relevant for the entire IPFIX Message , for example , when exporting the Exporting Process Statistics , or in case of a hierarchy of Collectors when aggregated Data Records are exported .	230	0
5106	Code	The Code field is one octet and identifies the Type of EAP packet . EAP Codes are assigned as follows : 1 Request 2 Response 3 Success 4 Failure Since EAP only defines Codes 1-4 , EAP packets with other codes MUST be silently discarded by both authenticators and peers .	240	0
5106	Identifier	The Identifier field is one octet and aids in matching Responses with Requests .	301	0
5106	Length	The Length field is two octets and indicates the length , in octets , of the EAP packet including the Code , Identifier , Length , and Data fields . Octets outside the range of the Length field should be treated as Data Link Layer padding and MUST be ignored upon reception . A message with the Length field set to a value larger than the number of received octets MUST be silently discarded .	100	0
5191	Message Type	The Message Type field is two octets , and it is used in order to communicate the message type with the message . Message Type allocation is managed by IANA [ IANAWEB ]	301	0
5191	AVPs	AVPs are a method of encapsulating information relevant to the PANA message . See Section 6.3 for more information on AVPs . Each AVP of type OctetString MUST be padded to align on a 32-bit boundary , while other AVP types align naturally . A number of zero-valued bytes are added to the end of the AVP Value field until a word boundary is reached . The length of the padding is not reflected in the AVP Length field [ RFC3588 ].	301	1
5219	C	Continuation flag ( 1 bit ): 1 , if the data following the ADU descriptor is a continuation of an ADU frame that was too large to fit within a single RTP packet; 0 otherwise .	210	0
5219	T	Descriptor Type flag ( 1 bit ): 0 if this is a 1-byte ADU descriptor; 1 if this is a 2-byte ADU descriptor .	210	0
5219	ADU size	( 6 or 14 bits ): The size ( in bytes ) of the ADU frame that will follow this ADU descriptor ( i.e ., NOT including the size of the descriptor itself ). A 2-byte ADU descriptor ( with a 14-bit  ADU size  field ) is used for ADU frame sizes of 64 bytes or more . For smaller ADU frame sizes , senders MAY alternatively use a 1-byte ADU descriptor ( with a 6-bit  ADU size  field ). Receivers MUST be able to accept an ADU descriptor of either size .	100	1
5268	Type	The type field indicates the type of the message . Its value determines the format of the remaining data .	240	0
5268	Code	The code field depends on the message type . It is used to create an additional level of message granularity .	231	0
5268	Checksum	The checksum field is used to detect data corruption in the ICMPv6 message and parts of the IPv6 header .	301	0
5268	Reserved	MUST be set to zero by the sender and ignored by the receiver .	500	0
5268	Identifier	MUST be set by the sender so that replies can be matched to this Solicitation .	301	0
5268	Options	Source Link-Layer Address : When known , the link-layer address of the sender SHOULD be included using the Link-Layer Address ( LLA ) option . See the LLA option format below . New Access Point Link-Layer Address : The link-layer address or identification of the access point for which the MN requests routing advertisement information . It MUST be included in all RtSolPr messages . More than one such address or identifier can be present . This field can also be a wildcard address . See the LLA option below .	230	1
5320	ID Extension	a 16-bit extension of the Identification field in the outer IPv4 header; encodes the most-significant 16 bits of a 32 bit SEAL_ID value .	230	0
5320	A	the  Acknowledgement Requested  bit . Set to 1 if the ITE wishes to receive an explicit acknowledgement from the ETE .	231	0
5320	R	the  Report Fragmentation  bit . Set to 1 if the ITE wishes to receive a report from the ETE if any IPv4 fragmentation occurs .	231	0
5320	M	the  More Segments  bit . Set to 1 if this SEAL protocol packet contains a non-final segment of a multi-segment mid-layer packet .	231	0
5320	RSV	a 2-bit field reserved for future use . Must be set to 0 for the purpose of this specification .	500	0
5326	Version number	( 4 bits ): MUST be set to the binary value 0000 for this version of the protocol .	220	0
5326	Segment type flags	( 4 bits ) The last 4 bits of the control byte in the segment header are flags that indicate the nature of the segment . In order ( most significant bit first ), these flags are CTRL , EXC , Flag 1 , and Flag 0 . A value of 0 in the CTRL ( Control ) flag identifies the segment as a data segment , while a value of 1 identifies it as a control segment . A data segment with the EXC ( Exception ) flag set to 0 is a red-part segment; a data segment with EXC set to 1 is a green-part segment . For a control segment , having the EXC flag set to 1 indicates that the segment pertains to session cancellation activity . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 1 indicates EOB . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 0 indicates data without any additional protocol significance . Any red-part data segment with either flag bit non-zero is a checkpoint . Any red-part data segment with Flag 1 set to 1 indicates the end of red-part .	301	0
5106	Identifier	The Identifier field is one octet and aids in matching Responses with Requests .	301	0
5106	Length	The Length field is two octets and indicates the length , in octets , of the EAP packet including the Code , Identifier , Length , and Data fields . Octets outside the range of the Length field should be treated as Data Link Layer padding and MUST be ignored upon reception . A message with the Length field set to a value larger than the number of received octets MUST be silently discarded .	100	0
5268	Code	The code field depends on the message type . It is used to create an additional level of message granularity .	231	0
5413	Length	Length ( two octets ): the length of the SLAPP message , including the entire SLAPP header	100	0
5414	Version	This field indicates the protocol version .	220	0
5414	M	The MAC-type field , ' M ', distinguishes between Local MAC WTPs and Split MAC WTPs . It is used to efficiently realize interoperability between WTPs of the two different designs . A ' 0 ' value indicates WiCoP exchanges with a Split MAC WTP while a ' 1 ' value indicates WiCoP exchanges with a Local MAC WTP . The presence of this classification bit in the WiCoP common header serves to expedite processing of WiCoP and WLAN traffic at the AC . With a single parsing of the WiCoP common header once , the AC will be able to determine the appropriate processing required for the particular WiCoP packet .	210	0
5414	D	The differentiator field , ' D ', is used to distinguish between WTP variants within a type of WTP design . The CAPWAP Architecture Taxonomy [ RFC4118 ] illustrates that the Split MAC design allows encryption/decryption to be performed at either the WTP or the AC . The Architecture Taxonomy also indicates that the Local MAC design allows authentication to take place at either the WTP or the AC . WiCoP acknowledges these major variants and accommodates them using the ' D ' field in conjunction with the ' M ' field . For a Split MAC WTP , the ' D ' field is used to indicate location of encryption/decryption while for a Local MAC WTP , the ' D ' field is used to indicate location of authentication . The following table highlights their usage .	210	0
5414	Length	This field specifies the length of the WiCoP payload following the header	100	0
5414	Msg Type	The message type field specifies the type of control message transported in the packet . The list of control messages is presented in Section 5.2.1 .	231	0
5086	... IPv4/IPv6 and UDP (demultiplexing layer) headers...	CESoPSN implementations working with IPv4 PSN MUST set the  Don't Fragment  flag in IP headers of the packets they generate .	231	1
5086	OPTIONAL	Fixed RTP Header ( see [ RFC3550 ])	100	0
5086	Packetized TDM data (Payload)... ...	All the services considered in this document are treated as sequences of  basic structures  ( see Section 3 above ). The payload of a CESoPSN packet always consists of a fixed number of octets filled , octet by octet , with the data contained in the corresponding consequent basic structures that preserve octet alignment between these structures and the packet payload boundaries , in accordance with the following rules	100	0
5096	Payload Proto	8-bit selector . Identifies the type of header immediately following the Mobility Header . Uses the same values as the IPv6 Next Header field [ 11 ]. This field is intended to be used by a future extension ( see Appendix B.1 ). Implementations conforming to this specification SHOULD set the payload protocol type to IPPROTO_NONE ( 59 decimal ).	231	0
5101	Length	Total length of the Set , in octets , including the Set Header , all records , and the optional padding .	100	0
5101	Observation Domain ID	A 32-bit identifier of the Observation Domain that is locally unique to the Exporting Process . The Exporting Process uses the Observation Domain ID to uniquely identify to the Collecting Process the Observation Domain that metered the Flows . It is RECOMMENDED that this identifier also be unique per IPFIX Device . Collecting Processes SHOULD use the Transport Session and the Observation Domain ID field to separate different export streams originating from the same Exporting Process . The Observation Domain ID SHOULD be 0 when no specific Observation Domain ID is relevant for the entire IPFIX Message , for example , when exporting the Exporting Process Statistics , or in case of a hierarchy of Collectors when aggregated Data Records are exported .	230	0
5106	Code	The Code field is one octet and identifies the Type of EAP packet . EAP Codes are assigned as follows : 1 Request 2 Response 3 Success 4 Failure Since EAP only defines Codes 1-4 , EAP packets with other codes MUST be silently discarded by both authenticators and peers .	240	0
5106	Type	The EAP Type for this EAP method is 49 .	220	0
5191	Reserved	This 16-bit field is reserved for future use . It MUST be set to zero and ignored by the receiver .	500	0
5191	Message Length	The Message Length field is two octets and indicates the length of the PANA message including the header fields .	100	0
5191	Flags	The Flags field is two octets . The following bits are assigned	301	0
5191	Message Type	The Message Type field is two octets , and it is used in order to communicate the message type with the message . Message Type allocation is managed by IANA [ IANAWEB ]	301	0
5191	AVPs	AVPs are a method of encapsulating information relevant to the PANA message . See Section 6.3 for more information on AVPs . Each AVP of type OctetString MUST be padded to align on a 32-bit boundary , while other AVP types align naturally . A number of zero-valued bytes are added to the end of the AVP Value field until a word boundary is reached . The length of the padding is not reflected in the AVP Length field [ RFC3588 ].	301	1
5219	C	Continuation flag ( 1 bit ): 1 , if the data following the ADU descriptor is a continuation of an ADU frame that was too large to fit within a single RTP packet; 0 otherwise .	210	0
5219	T	Descriptor Type flag ( 1 bit ): 0 if this is a 1-byte ADU descriptor; 1 if this is a 2-byte ADU descriptor .	210	0
5219	ADU size	( 6 or 14 bits ): The size ( in bytes ) of the ADU frame that will follow this ADU descriptor ( i.e ., NOT including the size of the descriptor itself ). A 2-byte ADU descriptor ( with a 14-bit  ADU size  field ) is used for ADU frame sizes of 64 bytes or more . For smaller ADU frame sizes , senders MAY alternatively use a 1-byte ADU descriptor ( with a 6-bit  ADU size  field ). Receivers MUST be able to accept an ADU descriptor of either size .	100	1
3550	synchronization source (SSRC) identifier	32 bits The SSRC field identifies the synchronization source . This identifier SHOULD be chosen randomly , with the intent that no two synchronization sources within the same RTP session will have the same SSRC identifier . An example algorithm for generating a random identifier is presented in Appendix A.6 . Although the probability of multiple sources choosing the same identifier is low , all RTP implementations must be prepared to detect and resolve collisions . Section 8 describes the probability of collision along with a mechanism for resolving collisions and detecting RTP-level forwarding loops based on the uniqueness of the SSRC identifier . If a source changes its source transport address , it must also choose a new SSRC identifier to avoid being interpreted as a looped source ( see Section 8.2 ).	231	0
3588	Version	Version This Version field MUST be set to 1 to indicate Diameter Version 1 .	220	0
3588	Message Length	Message Length The Message Length field is three octets and indicates the length of the Diameter message including the header fields .	100	0
3588	command flags	The Command Flags field is eight bits . The following bits are assigned : 0 1 2 3 4 5 6 7 +-+-+-+-+-+-+-+-+ |R P E T r r r r| +-+-+-+-+-+-+-+-+ R(equest ) - If set , the message is a request . If cleared , the message is an answer . P(roxiable ) - If set , the message MAY be proxied , relayed or redirected . If cleared , the message MUST be locally processed . E(rror ) - If set , the message contains a protocol error , and the message will not conform to the ABNF described for this command . Messages with the ' E ' bit set are commonly referred to as error messages . This bit MUST NOT be set in request messages . See Section 7.2 . T(Potentially re-transmitted message ) - This flag is set after a link failover procedure , to aid the removal of duplicate requests . It is set when resending requests not yet acknowledged , as an indication of a possible duplicate due to a link failure . This bit MUST be cleared when sending a request for the first time , otherwise the sender MUST set this flag . Diameter agents only need to be concerned about the number of requests they send based on a single received request; retransmissions by other entities need not be tracked . Diameter agents that receive a request with the T flag set , MUST keep the T flag set in the forwarded request . This flag MUST NOT be set if an error answer message ( e.g ., a protocol error ) has been received for the earlier message . It can be set only in cases where no answer has been received from the server for a request and the request is sent again . This flag MUST NOT be set in answer messages . r(eserved ) - these flag bits are reserved for future use , and MUST be set to zero , and ignored by the receiver .	231	0
3588	Command-Code	The Command-Code field is three octets , and is used in order to communicate the command associated with the message . The 24-bit address space is managed by IANA ( see Section 11.2.1).Command-Code values 16,777,214 and 16,777,215 ( hexadecimal values FFFFFE - FFFFFF ) are reserved for experimental use	301	0
3588	Hop-by-Hop Identifier	The Hop-by-Hop Identifier is an unsigned 32-bit integer field ( in network byte order ) and aids in matching requests and replies . The sender MUST ensure that the Hop-by-Hop identifier in a request is unique on a given connection at any given time , and MAY attempt to ensure that the number is unique across reboots . The sender of an Answer message MUST ensure that the Hop-by-Hop Identifier field contains the same value that was found in the corresponding request . The Hop-by-Hop identifier is normally a monotonically increasing number , whose start value was randomly generated . An answer message that is received with an unknown Hop-by-Hop Identifier MUST be discarded .	231	0
5792	Build Number	This field contains the build number for the product , if applicable . This may provide more granularity than the minor version number , as many builds may occur leading up to an official release , and all these builds may share a single major and minor version number . If unused or unknown , this field SHOULD be set to 0 .	220	0
5792	Service Pack Major	This field contains the major version number of the service pack for the product , if applicable . If unused or unknown , this field SHOULD be set to 0 .	220	0
5792	Service Pack Minor	This field contains the minor version number of the service pack for the product , if applicable . If unused or unknown , this field SHOULD be set to 0 .	220	0
5793	Version	This field indicates the version of the format for the PB-TNC message . This version is intended to allow for evolution of the PB-TNC protocol in a manner that can easily be detected by message recipients .	220	0
5793	D	When a Posture Broker Client is sending this message , the Directionality bit MUST be set to 0 . When a Posture Broker Server is sending this message , the Directionality bit MUST be set to 1 . This helps avoid any situation where two Posture Broker Clients or two Posture Broker Servers engage in a dialog . It also helps with debugging .	210	0
761	FIN	Control Bits : 8 bits ( from left to right ):	231	0
761	Checksum	16 bits The checksum field is the 16 bit one's complement of the one's complement sum of all 16 bit words in the header and text . If a segment contains an odd number of header and text octets to be checksummed , the last octet is padded on the right with zeros to form a 16 bit word for checksum purposes . The pad is not transmitted as part of the segment . While computing the checksum , the checksum field itself is replaced with zeros .	301	0
1583	Authentication	A 64-bit field for use by the authentication scheme .	400	0
1883	Hop Limit	8-bit unsigned integer . Decremented by 1 by each node that forwards the packet . The packet is discarded if Hop Limit is decremented to zero .	100	0
5320	RSV	a 2-bit field reserved for future use . Must be set to 0 for the purpose of this specification .	500	0
5326	Version number	( 4 bits ): MUST be set to the binary value 0000 for this version of the protocol .	220	0
5326	Segment type flags	( 4 bits ) The last 4 bits of the control byte in the segment header are flags that indicate the nature of the segment . In order ( most significant bit first ), these flags are CTRL , EXC , Flag 1 , and Flag 0 . A value of 0 in the CTRL ( Control ) flag identifies the segment as a data segment , while a value of 1 identifies it as a control segment . A data segment with the EXC ( Exception ) flag set to 0 is a red-part segment; a data segment with EXC set to 1 is a green-part segment . For a control segment , having the EXC flag set to 1 indicates that the segment pertains to session cancellation activity . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 1 indicates EOB . Any data segment ( whether red-part or green-part ) with both Flag 1 and Flag 0 set to 0 indicates data without any additional protocol significance . Any red-part data segment with either flag bit non-zero is a checkpoint . Any red-part data segment with Flag 1 set to 1 indicates the end of red-part .	301	0
5793	Reserved	This field is reserved . For this version of this specification , it MUST be set to 0 on transmission and ignored on reception . Future versions of this specification may allow senders to set some of these bits and recipients to interpret them .	500	0
5793	Remediation Parameters Vendor ID	The Remediation Parameters Vendor ID field identifies a vendor by using the SMI Private Enterprise Number ( PEN ). Any organization can receive its own unique PEN from IANA , the Internet Assigned Numbers Authority . The Remediation Parameters Vendor ID qualifies the Remediation Parameters Type field so that each vendor has 2^32 separate Remediation Parameters Types available for its use . Remediation Parameters Types standardized by the IETF are always used with the value zero ( 0 ) in this field .	400	0
5793	Remediation Parameters Type	The Remediation Parameters Type field identifies the type of remediation parameters contained in the Remediation Parameters field . A Posture Broker Client or Posture Broker Server MUST support having multiple Remediation Parameters messages contained in a single PB-TNC batch that have the same Remediation Parameters Type and/or Remediation Parameters Vendor ID .	231	0
5798	Count IPvX Addr	This is the number of either IPv4 addresses or IPv6 addresses contained in this VRRP advertisement .	231	0
5798	Rsvd	This field MUST be set to zero on transmission and ignored on reception .	500	0
5798	Checksum	The checksum field is used to detect data corruption in the VRRP message . The checksum is the 16-bit one's complement of the one's complement sum of the entire VRRP message starting with the version field and a  pseudo-header  as defined in Section 8.1 of [ RFC2460 ]. The next header field in the  pseudo-header  should be set to 112 ( decimal ) for VRRP . For computing the checksum , the checksum field is set to zero . See RFC1071 for more detail [ RFC1071 ].	301	0
7455	Link Trailer	Media-dependent trailer . For Ethernet , this is the FCS ( Frame Check Sequence).Variable	301	1
760	Version	4 bits,The Version field indicates the format of the internet header .	220	0
760	IHL	4 bits Internet Header Length is the length of the internet header in 32 bit words , and thus points to the beginning of the data . Note that the minimum value for a correct header is 5 .	100	0
760	Type of Service	8 bits The Type of Service provides an indication of the abstract parameters of the quality of service desired . These parameters are to be used to guide the selection of the actual service parameters when transmitting a datagram through a particular network . Several networks offer service precedence , which somehow treats high precedence traffic as more important than other traffic . A few networks offer a Stream service , whereby one can achieve a smoother service at some cost . Typically this involves the reservation of resources within the network . Another choice involves a low-delay vs . high-reliability trade off . Typically networks invoke more complex ( and delay producing ) mechanisms as the need for reliability increases . Bits 0-2 : Precedence . Bit 3 : Stream or Datagram . Bits 4-5 : Reliability . Bit 6 : Speed over Reliability . Bits 7 : Speed . 0 1 2 3 4 5 6 7 +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | | | PRECEDENCE | STRM|RELIABILITY| S/R |SPEED| | | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ PRECEDENCE STRM RELIABILITY S/R SPEED 111-Flash Override 1-STREAM 11-highest 1-speed 1-high 110-Flash 0-DTGRM 10-higher 0-rlblt 0-low 11X-Immediate 01-lower 01X-Priority 00-lowest 00X-Routine The type of service is used to specify the treatment of the datagram during its transmission through the internet system . In the discussion ( section 3.2 ) below , a chart shows the relationship of the internet type of service to the actual service provided on the ARPANET , the SATNET , and the PRNET .	240	0
5412	Payload...	This field contains the header for an LWAPP data message or LWAPP control message , followed by the data associated with that message .	400	1
5413	Maj	Maj ( 4 bits ): the major number of the SLAPP version	220	0
5413	Min	Min ( 4 bits ): the minor number of the SLAPP version	220	0
5413	Type	Type ( 1 octet ): the type of SLAPP message	231	0
5096	Header Len	8-bit unsigned integer , representing the length of the Mobility Header in units of 8 octets , excluding the first 8 octets . The length of the Mobility Header MUST be a multiple of 8 octets .	100	0
5096	MH Type	8-bit selector . Identifies the particular mobility message in question . Current values are specified in Section 6.1.2 and onward . An unrecognized MH Type field causes an error indication to be sent .	230	0
5096	Reserved	8-bit field reserved for future use . The value MUST be initialized to zero by the sender , and MUST be ignored by the receiver .	500	0
5096	Checksum	16-bit unsigned integer . This field contains the checksum of the Mobility Header . The checksum is calculated from the octet string consisting of a  pseudo-header  followed by the entire Mobility Header starting with the Payload Proto field . The checksum is the 16-bit one's complement of the one's complement sum of this string . The pseudo-header contains IPv6 header fields , as specified in Section 8.1 of RFC 2460 [ 11 ]. The Next Header value used in the pseudo-header is 2 . The addresses used in the pseudo-header are the addresses that appear in the Source and Destination Address fields in the IPv6 packet carrying the Mobility Header . Note that the procedures of calculating upper layer checksums while away from home described in Section 11.3.1 apply even for the Mobility Header . If a mobility message has a Home Address destination option , then the checksum calculation uses the home address in this option as the value of the IPv6 Source Address field . The type 2 routing header is treated as explained in [ 11 ]. The Mobility Header is considered as the upper layer protocol for the purposes of calculating the pseudo-header . The Upper-Layer Packet Length field in the pseudo-header MUST be set to the total length of the Mobility Header .	301	0
5096	Message Data	The ' Message Data ' field carries the data specific to the experimental protocol extension . The total length of the message is indicated by the ' Header Len ' field in the Mobility Header .	240	1
5395	NAME	NAME is an owner name , i.e ., the name of the node to which this resource record pertains . NAMEs are specific to a CLASS as described in section 3.2 . NAMEs consist of an ordered sequence of one or more labels , each of which has a label type [ RFC1035 ] [ RFC2671 ].	400	1
5395	TYPE	TYPE is a 2-octet unsigned integer containing one of the RRTYPE codes	231	0
5395	CLASS	CLASS is a 2-octet unsigned integer containing one of the RR CLASS codes .	231	0
5395	RDLENGTH	RDLENGTH is an unsigned 16-bit integer that specifies the length in octets of the RDATA field .	100	0
5395	RDATA	RDATA is a variable length string of octets that constitutes the resource . The format of this information varies according to the TYPE and , in some cases , the CLASS of the resource record .	231	1
5412	VER	A 2-bit field that contains the version of LWAPP used in this packet . The value for this document is 0 .	231	0
5412	RID	A 3-bit field that contains the Radio ID number for this packet . WTPs with multiple radios but a single MAC address use this field to indicate which radio is associated with the packet .	231	0
5412	C	The control message ' C ' bit indicates whether this packet carries a data or control message . When this bit is zero ( 0 ), the packet carries an LWAPP data message in the payload ( see Section 4.1 ). When this bit is one ( 1 ), the packet carries an LWAPP control message as defined in Section 4.2 for consumption by the addressed destination .	210	0
5412	F	The Fragment ' F ' bit indicates whether this packet is a fragment . When this bit is one ( 1 ), the packet is a fragment and MUST be combined with the other corresponding fragments to reassemble the complete information exchanged between the WTP and AC .	210	0
5412	L	The Not Last ' L ' bit is valid only if the ' F ' bit is set and indicates whether the packet contains the last fragment of a fragmented exchange between the WTP and AC . When this bit is 1 , the packet is not the last fragment . When this bit is 0 , the packet is the last fragment .	210	0
5412	Length	The 16-bit length field contains the number of bytes in the Payload . The field is encoded as an unsigned number . If the LWAPP packet is encrypted , the length field includes the Advanced Encryption Standard Counter with CBC-MAC ( AES-CCM ) MIC ( see Section 10.2 for more information ).	100	0
5412	Status/WLANs	he interpretation of this 16-bit field is binding-specific . Refer to the transport portion of the binding for a wireless technology for the specification .	231	0
5412	Payload...	This field contains the header for an LWAPP data message or LWAPP control message , followed by the data associated with that message .	400	1
5413	Maj	Maj ( 4 bits ): the major number of the SLAPP version	220	0
4303	Security Parameters Index	The SPI is an arbitrary 32-bit value that is used by a receiver to identify the SA to which an incoming packet is bound . The SPI field is mandatory . For a unicast SA , the SPI can be used by itself to specify an SA , or it may be used in conjunction with the IPsec protocol type ( in this case ESP ). Because the SPI value is generated by the receiver for a unicast SA , whether the value is sufficient to identify an SA by itself or whether it must be used in conjunction with the IPsec protocol value is a local matter . This mechanism for mapping inbound traffic to unicast SAs MUST be supported by all ESP implementations . If an IPsec implementation supports multicast , then it MUST support multicast SAs using the algorithm below for mapping inbound IPsec datagrams to SAs . Implementations that support only unicast traffic need not implement this de-multiplexing algorithm . In many secure multicast architectures ( e.g ., [ RFC3740 ]), a central Group Controller/Key Server unilaterally assigns the group security association's SPI . This SPI assignment is not negotiated or coordinated with the key management ( e.g ., IKE ) subsystems that reside in the individual end systems that comprise the group . Consequently , it is possible that a group security association and a unicast security association can simultaneously use the same SPI . A multicast-capable IPsec implementation MUST correctly de-multiplex inbound traffic even in the context of SPI collisions . Each entry in the Security Association Database ( SAD ) [ Ken-Arch ] must indicate whether the SA lookup makes use of the destination , or destination and source , IP addresses , in addition to the SPI . For multicast SAs , the protocol field is not employed for SA lookups . For each inbound , IPsec-protected packet , an implementation must conduct its search of the SAD such that it finds the entry that matches the  longest  SA identifier . In this context , if two or more SAD entries match based on the SPI value , then the entry that also matches based on destination , or destination and source , address comparison ( as indicated in the SAD entry ) is the  longest  match . This implies a logical ordering of the SAD search as follows : 1 . Search the SAD for a match on { SPI , destination address , source address }. If an SAD entry matches , then process the inbound ESP packet with that matching SAD entry . Otherwise , proceed to step 2 . 2 . Search the SAD for a match on { SPI , destination address }. If the SAD entry matches , then process the inbound ESP packet with that matching SAD entry . Otherwise , proceed to step 3 . 3 . Search the SAD for a match on only { SPI } if the receiver has chosen to maintain a single SPI space for AH and ESP , or on { SPI , protocol } otherwise . If an SAD entry matches , then process the inbound ESP packet with that matching SAD entry . Otherwise , discard the packet and log an auditable event . In practice , an implementation MAY choose any method to accelerate this search , although its externally visible behavior MUST be functionally equivalent to having searched the SAD in the above order . For example , a software-based implementation could index into a hash table by the SPI . The SAD entries in each hash table bucket's linked list are kept sorted to have those SAD entries with the longest SA identifiers first in that linked list . Those SAD entries having the shortest SA identifiers are sorted so that they are the last entries in the linked list . A hardware-based implementation may be able to effect the longest match search intrinsically , using commonly available Ternary Content-Addressable Memory ( TCAM ) features . The indication of whether source and destination address matching is required to map inbound IPsec traffic to SAs MUST be set either as a side effect of manual SA configuration or via negotiation using an SA management protocol , e.g ., IKE or Group Domain of Interpretation ( GDOI ) [ RFC3547 ]. Typically , Source-Specific Multicast ( SSM ) [ HC03 ] groups use a 3-tuple SA identifier composed of an SPI , a destination multicast address , and source address . An Any-Source Multicast group SA requires only an SPI and a destination multicast address as an identifier . The set of SPI values in the range 1 through 255 are reserved by the Internet Assigned Numbers Authority ( IANA ) for future use; a reserved SPI value will not normally be assigned by IANA unless the use of the assigned SPI value is specified in an RFC . The SPI value of zero ( 0 ) is reserved for local , implementation-specific use and MUST NOT be sent on the wire . ( For example , a key management implementation might use the zero SPI value to mean  No Security Association Exists  during the period when the IPsec implementation has requested that its key management entity establish a new SA , but the SA has not yet been established .)	231	0
4303	Padding	Two primary factors require or motivate use of the Padding field . o If an encryption algorithm is employed that requires the plaintext to be a multiple of some number of bytes , e.g ., the block size of a block cipher , the Padding field is used to fill the plaintext ( consisting of the Payload Data , Padding , Pad Length , and Next Header fields ) to the size required by the algorithm . o Padding also may be required , irrespective of encryption algorithm requirements , to ensure that the resulting ciphertext terminates on a 4-byte boundary . Specifically , the Pad Length and Next Header fields must be right aligned within a 4-byte word , as illustrated in the ESP packet format figures above , to ensure that the ICV field ( if present ) is aligned on a 4-byte boundary . Padding beyond that required for the algorithm or alignment reasons cited above could be used to conceal the actual length of the payload , in support of TFC . However , the Padding field described is too limited to be effective for TFC and thus should not be used for that purpose . Instead , the separate mechanism described below ( see Section 2.7 ) should be used when TFC is required . The sender MAY add 0 to 255 bytes of padding . Inclusion of the Padding field in an ESP packet is optional , subject to the requirements noted above , but all implementations MUST support generation and consumption of padding . o For the purpose of ensuring that the bits to be encrypted are a multiple of the algorithm's block size ( first bullet above ), the padding computation applies to the Payload Data exclusive of any IV , but including the ESP trailer fields . If a combined algorithm mode requires transmission of the SPI and Sequence Number to effect integrity , e.g ., replication of the SPI and Sequence Number in the Payload Data , then the replicated versions of these data items , and any associated , ICV-equivalent data , are included in the computation of the pad length . ( If the ESN option is selected , the high-order 32 bits of the ESN also would enter into the computation , if the combined mode algorithm requires their transmission for integrity .) o For the purposes of ensuring that the ICV is aligned on a 4-byte boundary ( second bullet above ), the padding computation applies to the Payload Data inclusive of the IV , the Pad Length , and Next Header fields . If a combined mode algorithm is used , any replicated data and ICV-equivalent data are included in the Payload Data covered by the padding computation . If Padding bytes are needed but the encryption algorithm does not specify the padding contents , then the following default processing MUST be used . The Padding bytes are initialized with a series of ( unsigned , 1-byte ) integer values . The first padding byte appended to the plaintext is numbered 1 , with subsequent padding bytes making up a monotonically increasing sequence : 1 , 2 , 3 , .... When this padding scheme is employed , the receiver SHOULD inspect the Padding field . ( This scheme was selected because of its relative simplicity , ease of implementation in hardware , and because it offers limited protection against certain forms of  cut and paste  attacks in the absence of other integrity measures , if the receiver checks the padding values upon decryption .) If an encryption or combined mode algorithm imposes constraints on the values of the bytes used for padding , they MUST be specified by the RFC defining how the algorithm is employed with ESP . If the algorithm requires checking of the values of the bytes used for padding , this too MUST be specified in that RFC .	400	1
4303	Pad Length	The Pad Length field indicates the number of pad bytes immediately preceding it in the Padding field . The range of valid values is 0 to 255 , where a value of zero indicates that no Padding bytes are present . As noted above , this does not include any TFC padding bytes . The Pad Length field is mandatory .	400	0
4303	Next Header	The Next Header is a mandatory , 8-bit field that identifies the type of data contained in the Payload Data field , e.g ., an IPv4 or IPv6 packet , or a next layer header and data . The value of this field is chosen from the set of IP Protocol Numbers defined on the web page of the IANA , e.g ., a value of 4 indicates IPv4 , a value of 41 indicates IPv6 , and a value of 6 indicates TCP . To facilitate the rapid generation and discarding of the padding traffic in support of traffic flow confidentiality ( see Section 2.4 ), the protocol value 59 ( which means  no next header ) MUST be used to designate a  dummy  packet . A transmitter MUST be capable of generating dummy packets marked with this value in the next protocol field , and a receiver MUST be prepared to discard such packets , without indicating an error . All other ESP header and trailer fields ( SPI , Sequence Number , Padding , Pad Length , Next Header , and ICV ) MUST be present in dummy packets , but the plaintext portion of the payload , other than this Next Header field , need not be well-formed , e.g ., the rest of the Payload Data may consist of only random bytes . Dummy packets are discarded without prejudice . Implementations SHOULD provide local management controls to enable the use of this capability on a per-SA basis . The controls should allow the user to specify if this feature is to be used and also provide parametric controls; for example , the controls might allow an administrator to generate random-length or fixed-length dummy packets . DISCUSSION : Dummy packets can be inserted at random intervals to mask the absence of actual traffic . One can also  shape  the actual traffic to match some distribution to which dummy traffic is added as dictated by the distribution parameters . As with the packet length padding facility for Traffic Flow Security ( TFS ), the most secure approach would be to generate dummy packets at whatever rate is needed to maintain a constant rate on an SA . If packets are all the same size , then the SA presents the appearance of a constant bit rate data stream , analogous to what a link crypto would offer at layer 1 or 2 . However , this is unlikely to be practical in many contexts , e.g ., when there are multiple SAs active , because it would imply reducing the allowed bandwidth for a site , based on the number of SAs , and that would undermine the benefits of packet switching . Implementations SHOULD provide controls to enable local administrators to manage the generation of dummy packets for TFC purposes .	231	0
4303	Integrity Check Value-ICV   (variable)~	The Integrity Check Value is a variable-length field computed over the ESP header , Payload , and ESP trailer fields . Implicit ESP trailer fields ( integrity padding and high-order ESN bits , if applicable ) are included in the ICV computation . The ICV field is optional . It is present only if the integrity service is selected and is provided by either a separate integrity algorithm or a combined mode algorithm that uses an ICV . The length of the field is specified by the integrity algorithm selected and associated with the SA . The integrity algorithm specification MUST specify the length of the ICV and the comparison rules and processing steps for validation .	301	1
4306	Selector Length	Specifies the length of this Traffic Selector Substructure including the header .	100	0
4306	Start Port*	Value specifying the smallest port number allowed by this Traffic Selector . For protocols for which port is undefined , or if all ports are allowed , this field MUST be zero . For the ICMP protocol , the two one-octet fields Type and Code are treated as a single 16-bit integer ( with Type in the most significant eight bits and Code in the least significant eight bits ) port number for the purposes of filtering based on this field .	400	0
4306	End Port*	Value specifying the largest port number allowed by this Traffic Selector . For protocols for which port is undefined , or if all ports are allowed , this field MUST be 65535 . For the ICMP protocol , the two one-octet fields Type and Code are treated as a single 16-bit integer ( with Type in the most significant eight bits and Code in the least significant eight bits ) port number for the purposed of filtering based on this field .	400	0
5415	Radio MAC Address	This optional field contains the MAC address of the radio receiving the packet . Because the native wireless frame format to IEEE 802.3 format causes the MAC address of the WTP's radio to be lost , this field allows the address to be communicated to the AC . This field is only present if the ' M ' bit is set . The HLEN field assumes 4-byte alignment , and this field MUST be padded with zeroes ( 0x00 ) if it is not 4-byte aligned .	230	1
5415	Length	The length of the MAC address field . The formats and lengths specified in [ EUI-48 ] and [ EUI-64 ] are supported .	100	0
5415	MAC Address	The MAC address of the receiving radio .	230	1
5415	Wireless Specific Information	This optional field contains technology-specific information that may be used to carry per - packet wireless information . This field is only present if the ' W ' bit is set . The WBID field in the CAPWAP Header is used to identify the format of the Wireless-Specific Information optional field . The HLEN field assumes 4-byte alignment , and this field MUST be padded with zeroes ( 0x00 ) if it is not 4-byte aligned .	400	1
5415	Length	The 8-bit field contains the length of the data field , with a maximum size of 255 .	100	0
5415	Data	Wireless-specific information , defined by the wireless - specific binding specified in the CAPWAP Header's WBID field .	400	1
5415	Payload	This field contains the header for a CAPWAP Data Message or CAPWAP Control Message , followed by the data contained in the message .	400	1
5433	Code	The Code field is one octet and identifies the Type of EAP packet . EAP Codes are assigned as follows : 1 Request 2 Response 3 Success 4 Failure Since EAP only defines Codes 1-4 , EAP packets with other codes MUST be silently discarded by both authenticators and peers .	240	0
5433	Identifier	The Identifier field is one octet and aids in matching Responses with Requests .	231	0
7011	Version Number	Version of IPFIX to which this Message conforms . The value of this field is 0x000a for the current version , incrementing by one the version used in the NetFlow services export version 9	220	0
7011	Length	Total length of the IPFIX Message , measured in octets , including Message Header and Set(s ).	100	0
7011	Observation Domain ID	A 32-bit identifier of the Observation Domain that is locally unique to the Exporting Process . The Exporting Process uses the Observation Domain ID to uniquely identify to the Collecting Process the Observation Domain that metered the Flows . It is RECOMMENDED that this identifier also be unique per IPFIX Device . Collecting Processes SHOULD use the Transport Session and the Observation Domain ID field to separate different export streams originating from the same Exporter . The Observation Domain ID SHOULD be 0 when no specific Observation Domain ID is relevant for the entire IPFIX Message , for example , when exporting the Exporting Process Statistics , or in the case of a hierarchy of Collectors when aggregated Data Records are exported .	230	0
5574	RTP Header	No additional header fields specific to this payload format are required .	400	0
5574	one or more frames of Speex ....	For RTP-based transportation of Speex-encoded audio , the standard RTP header [ RFC3550 ] is followed by one or more payload data blocks .	400	1
5574	padding	An optional padding terminator may also be used	500	1
5584	P	Padding(P ): 1 bit If the padding bit is set , the packet contains one or more additional padding octets at the end , which are not part of the payload . The last octet of the padding contains a count of how many padding octets should be ignored , including itself . Padding may be needed by some encryption algorithms with fixed block sizes or for carrying several RTP packets in a lower-layer protocol data unit ( see [ 1 ]).	231	0
5651	S	Transport Session Identifier flag ( S ): 1 bit This is the number of full 32-bit words in the TSI field . The TSI field is 32*S + 16*H bits in length , i.e ., the length is either 0 bits , 16 bits , 32 bits , or 48 bits .	231	0
5651	O	Transport Object Identifier flag ( O ): 2 bits This is the number of full 32-bit words in the TOI field . The TOI field is 32*O + 16*H bits in length , i.e ., the length is either 0 bits , 16 bits , 32 bits , 48 bits , 64 bits , 80 bits , 96 bits , or 112 bits .	231	0
5651	H	Half-word flag ( H ): 1 bit The TSI and the TOI fields are both multiples of 32 bits plus 16*H bits in length . This allows the TSI and TOI field lengths to be multiples of a half-word ( 16 bits ), while ensuring that the aggregate length of the TSI and TOI fields is a multiple of 32 bits .	100	0
5268	Subtype	This document creates a new registry for the ' Subtype ' field in the above ICMPv6 message , called the  FMIPv6 Message Types . IANA has assigned the following values . +---------+-------------+---------------+ | Subtype | Description | Reference | +---------+-------------+---------------+ | 2 | RtSolPr | Section 6.1.1 | | 3 | PrRtAdv | Section 6.1.2 | | 4 | HI | Section 6.2.1 | | 5 | HAck | Section 6.2.2 | +---------+-------------+---------------+	240	0
3549	Type	16 bit . This field describes the message content . It can be one of the standard message types : NLMSG_NOOP Message is ignored.NLMSG_ERROR The message signals an error and the payload contains a nlmsgerr structure.This can be looked at as a NACK and typically it is from FEC to CPC . NLMSG_DONE Message terminates a multipart message.Individual IP services specify more message types , e.g.,NETLINK_ROUTE service specifies several types , such as RTM_NEWLINK,RTM_DELLINK , RTM_GETLINK , RTM_NEWADDR , RTM_DELADDR , RTM_NEWROUTE,RTM_DELROUTE , etc .	240	0
3549	Flags	16 bits . The standard flag bits used in Netlink are NLM_F_REQUEST Must be set on all request messages ( typically from user space to kernel space ) NLM_F_MULTI Indicates the message is part of a multipart message terminated by NLMSG_DONE; NLM_F_ACK Request for an acknowledgment on success . Typical direction of request is from user space ( CPC ) to kernel space ( FEC ). NLM_F_ECHO Echo this request . Typical direction of request is from user space ( CPC ) to kernel space ( FEC ).	240	0
5379	Call-ID	This field frequently contains an IP address or hostname of a UAC ( User Agent Client ) appended to the Call-ID value . A user agent executing a user-level privacy function on its own SHOULD substitute for the IP address or hostname that is frequently appended to the Call-ID value a suitably long random value ( the value used as the ' tag ' for the From header of the request might even be reused ) as indicated in Section 4.1 in RFC 3323 . A privacy service MAY anonymize the Call-ID header when the request contains Privacy:user by substituting for the IP address or hostname in the Call-ID a suitably long random value ( such as a From tag value ) so that it is sufficiently unique as indicated in Section 5.3 in RFC 3323 .	230	1
5379	Contact	This field contains a URI used to reach the user agent for mid-dialog requests and possibly out-of-dialog requests , such as REFER [ RFC3315 ]. Since the Contact header is essential for routing further requests to the user agent , it must include a functional URI even when it is anonymized .	230	1
5379	From	This field contains the identity of the user , such as display-name and URI . A user agent executing a user-level privacy function on its own SHOULD anonymize a From header using an anonymous display-name and an anonymous URI as indicated in Section 4.1 in RFC 3323 . A privacy service should anonymize a From header when user privacy is requested with Privacy:user .	230	1
5379	History-Info	History-Info [ RFC4244 ] header URIs to which the request was forwarded or retargeted can reveal general routing information . A user agent executing a user-level privacy function on its own SHOULD NOT add a History-Info header as indicated in Section 3.3 in RFC 4244 . A privacy service SHOULD delete the History-Info headers when user privacy is requested with Privacy:header , Privacy:session , or Privacy:history as indicated in Section 3.3 in RFC 4244 . The privacy could be also expressed for a specific History-Info entry by inserting  privacy=history  in the History-Info header . In such a case , a privacy service SHOULD delete the History-Info entry as indicated in Section 4.3.3.1.1 in RFC 4244 .	230	1
5379	In-Reply-To	The In-Reply-To header contains a Call-ID of the referenced dialog . The replying user may be identified by the Call-ID in an In-Reply-To header .	230	1
5379	Organization	This field contains additional information about the user . A user agent executing a user-level privacy function on its own should not add an Organization header as implied in Section 4.1 in RFC 3323 .	230	1
5379	Server	This field contains information about the software used by the UAS to handle the request .	230	1
5379	Subject	This field contains free-form text about the subject of the call . It may include text describing something about the user .	400	1
3451	Congestion Control Information	Congestion Control Information ( CCI ): 32 , 64 , 96 or 128 bits Used to carry congestion control information . For example , the congestion control information could include layer numbers , logical channel numbers , and sequence numbers . This field is opaque for the purpose of this specification .	400	1
5379	Via	The bottommost Via header added by a user agent contains the IP address and port or hostname that are used to reach the user agent for responses . Via headers added by proxies may reveal information about the administrative domain of the user . A user agent MUST NOT anonymize a Via header as indicated in Section 4.1.1.3 in RFC 3323 , unless it can obtain an IP address that is functional yet has a characteristic of anonymity . This may be possible by obtaining an IP address specifically for this purpose either from the service provider or through features such as TURN .	230	1
5391	0 0 0 0 0	The five most significant bits are reserved for further extension and MUST be set to zero and MUST be ignored by receivers .	500	0
5391	MI	The Mode Index ( MI ) field ( 3 bits ) gives the mode of the following frame(s ) as per the table : +------------+--------------+------------+ | Mode Index | G.711.1 mode | Frame size | +------------+--------------+------------+ | 1 | R1 | 40 octets | | 2 | R2a | 50 octets | | 3 | R2b | 50 octets | | 4 | R3 | 60 octets | +------------+--------------+------------+ Table 3 : Modes in payload header All other values of MI are reserved for future use and MUST NOT be used .	240	0
5395	ID	The ID field identifies the query and is echoed in the response so they can be matched .	231	0
5395	QR	The QR bit indicates whether the header is for a query or a response .	210	0
5395	OpCode	Currently DNS OpCodes are assigned as follows : OpCode Name Reference 0 Query [ RFC1035 ] 1 IQuery ( Inverse Query , Obsolete ) [ RFC3425 ] 2 Status [ RFC1035 ] 3 available for assignment 4 Notify [ RFC1996 ] 5 Update [ RFC2136 ] 6-15 available for assignment New OpCode assignments require an IETF Standards Action as modified by [ RFC4020 ]	240	0
5395	NAME	NAME is an owner name , i.e ., the name of the node to which this resource record pertains . NAMEs are specific to a CLASS as described in section 3.2 . NAMEs consist of an ordered sequence of one or more labels , each of which has a label type [ RFC1035 ] [ RFC2671 ].	400	1
5395	TYPE	TYPE is a 2-octet unsigned integer containing one of the RRTYPE codes	231	0
5395	CLASS	CLASS is a 2-octet unsigned integer containing one of the RR CLASS codes .	231	0
5395	RDLENGTH	RDLENGTH is an unsigned 16-bit integer that specifies the length in octets of the RDATA field .	100	0
5395	RDATA	RDATA is a variable length string of octets that constitutes the resource . The format of this information varies according to the TYPE and , in some cases , the CLASS of the resource record .	231	1
5412	VER	A 2-bit field that contains the version of LWAPP used in this packet . The value for this document is 0 .	231	0
5412	RID	A 3-bit field that contains the Radio ID number for this packet . WTPs with multiple radios but a single MAC address use this field to indicate which radio is associated with the packet .	231	0
5412	C	The control message ' C ' bit indicates whether this packet carries a data or control message . When this bit is zero ( 0 ), the packet carries an LWAPP data message in the payload ( see Section 4.1 ). When this bit is one ( 1 ), the packet carries an LWAPP control message as defined in Section 4.2 for consumption by the addressed destination .	210	0
5412	F	The Fragment ' F ' bit indicates whether this packet is a fragment . When this bit is one ( 1 ), the packet is a fragment and MUST be combined with the other corresponding fragments to reassemble the complete information exchanged between the WTP and AC .	210	0
5412	L	The Not Last ' L ' bit is valid only if the ' F ' bit is set and indicates whether the packet contains the last fragment of a fragmented exchange between the WTP and AC . When this bit is 1 , the packet is not the last fragment . When this bit is 0 , the packet is the last fragment .	210	0
5412	Length	The 16-bit length field contains the number of bytes in the Payload . The field is encoded as an unsigned number . If the LWAPP packet is encrypted , the length field includes the Advanced Encryption Standard Counter with CBC-MAC ( AES-CCM ) MIC ( see Section 10.2 for more information ).	100	0
5412	Status/WLANs	he interpretation of this 16-bit field is binding-specific . Refer to the transport portion of the binding for a wireless technology for the specification .	231	0
5101	Version Number	Version of Flow Record format exported in this message . The value of this field is 0x000a for the current version , incrementing by one the version used in the NetFlow services export version 9 [ RFC3954 ].	220	0
5268	Type	The type field indicates the type of the message . Its value determines the format of the remaining data .	240	0
5268	Checksum	The checksum field is used to detect data corruption in the ICMPv6 message and parts of the IPv6 header .	301	0
5268	Subtype	This document creates a new registry for the ' Subtype ' field in the above ICMPv6 message , called the  FMIPv6 Message Types . IANA has assigned the following values . +---------+-------------+---------------+ | Subtype | Description | Reference | +---------+-------------+---------------+ | 2 | RtSolPr | Section 6.1.1 | | 3 | PrRtAdv | Section 6.1.2 | | 4 | HI | Section 6.2.1 | | 5 | HAck | Section 6.2.2 | +---------+-------------+---------------+	240	0
5268	Reserved	MUST be set to zero by the sender and ignored by the receiver .	500	0
5268	Identifier	MUST be set by the sender so that replies can be matched to this Solicitation .	301	0
5268	Options	Source Link-Layer Address : When known , the link-layer address of the sender SHOULD be included using the Link-Layer Address ( LLA ) option . See the LLA option format below . New Access Point Link-Layer Address : The link-layer address or identification of the access point for which the MN requests routing advertisement information . It MUST be included in all RtSolPr messages . More than one such address or identifier can be present . This field can also be a wildcard address . See the LLA option below .	230	1
5320	ID Extension	a 16-bit extension of the Identification field in the outer IPv4 header; encodes the most-significant 16 bits of a 32 bit SEAL_ID value .	230	0
5320	A	the  Acknowledgement Requested  bit . Set to 1 if the ITE wishes to receive an explicit acknowledgement from the ETE .	231	0
5320	R	the  Report Fragmentation  bit . Set to 1 if the ITE wishes to receive a report from the ETE if any IPv4 fragmentation occurs .	231	0
5379	Call-ID	This field frequently contains an IP address or hostname of a UAC ( User Agent Client ) appended to the Call-ID value . A user agent executing a user-level privacy function on its own SHOULD substitute for the IP address or hostname that is frequently appended to the Call-ID value a suitably long random value ( the value used as the ' tag ' for the From header of the request might even be reused ) as indicated in Section 4.1 in RFC 3323 . A privacy service MAY anonymize the Call-ID header when the request contains Privacy:user by substituting for the IP address or hostname in the Call-ID a suitably long random value ( such as a From tag value ) so that it is sufficiently unique as indicated in Section 5.3 in RFC 3323 .	230	1
5379	Contact	This field contains a URI used to reach the user agent for mid-dialog requests and possibly out-of-dialog requests , such as REFER [ RFC3315 ]. Since the Contact header is essential for routing further requests to the user agent , it must include a functional URI even when it is anonymized .	230	1
5379	From	This field contains the identity of the user , such as display-name and URI . A user agent executing a user-level privacy function on its own SHOULD anonymize a From header using an anonymous display-name and an anonymous URI as indicated in Section 4.1 in RFC 3323 . A privacy service should anonymize a From header when user privacy is requested with Privacy:user .	230	1
5379	History-Info	History-Info [ RFC4244 ] header URIs to which the request was forwarded or retargeted can reveal general routing information . A user agent executing a user-level privacy function on its own SHOULD NOT add a History-Info header as indicated in Section 3.3 in RFC 4244 . A privacy service SHOULD delete the History-Info headers when user privacy is requested with Privacy:header , Privacy:session , or Privacy:history as indicated in Section 3.3 in RFC 4244 . The privacy could be also expressed for a specific History-Info entry by inserting  privacy=history  in the History-Info header . In such a case , a privacy service SHOULD delete the History-Info entry as indicated in Section 4.3.3.1.1 in RFC 4244 .	230	1
5379	In-Reply-To	The In-Reply-To header contains a Call-ID of the referenced dialog . The replying user may be identified by the Call-ID in an In-Reply-To header .	230	1
5379	Organization	This field contains additional information about the user . A user agent executing a user-level privacy function on its own should not add an Organization header as implied in Section 4.1 in RFC 3323 .	230	1
5379	Server	This field contains information about the software used by the UAS to handle the request .	230	1
5379	Subject	This field contains free-form text about the subject of the call . It may include text describing something about the user .	400	1
5379	Via	The bottommost Via header added by a user agent contains the IP address and port or hostname that are used to reach the user agent for responses . Via headers added by proxies may reveal information about the administrative domain of the user . A user agent MUST NOT anonymize a Via header as indicated in Section 4.1.1.3 in RFC 3323 , unless it can obtain an IP address that is functional yet has a characteristic of anonymity . This may be possible by obtaining an IP address specifically for this purpose either from the service provider or through features such as TURN .	230	1
5391	0 0 0 0 0	The five most significant bits are reserved for further extension and MUST be set to zero and MUST be ignored by receivers .	500	0
5391	MI	The Mode Index ( MI ) field ( 3 bits ) gives the mode of the following frame(s ) as per the table : +------------+--------------+------------+ | Mode Index | G.711.1 mode | Frame size | +------------+--------------+------------+ | 1 | R1 | 40 octets | | 2 | R2a | 50 octets | | 3 | R2b | 50 octets | | 4 | R3 | 60 octets | +------------+--------------+------------+ Table 3 : Modes in payload header All other values of MI are reserved for future use and MUST NOT be used .	240	0
5395	ID	The ID field identifies the query and is echoed in the response so they can be matched .	231	0
5395	QR	The QR bit indicates whether the header is for a query or a response .	210	0
5395	OpCode	Currently DNS OpCodes are assigned as follows : OpCode Name Reference 0 Query [ RFC1035 ] 1 IQuery ( Inverse Query , Obsolete ) [ RFC3425 ] 2 Status [ RFC1035 ] 3 available for assignment 4 Notify [ RFC1996 ] 5 Update [ RFC2136 ] 6-15 available for assignment New OpCode assignments require an IETF Standards Action as modified by [ RFC4020 ]	240	0
5413	Min	Min ( 4 bits ): the minor number of the SLAPP version	220	0
3549	Device Flags	32 bits IFF_UP Interface is administratively up . IFF_BROADCAST Valid broadcast address set . IFF_DEBUG Internal debugging flag . IFF_LOOPBACK Interface is a loopback interface . IFF_POINTOPOINT Interface is a point-to-point link . IFF_RUNNING Interface is operationally up . IFF_NOARP No ARP protocol needed for this interface . IFF_PROMISC Interface is in promiscuous mode . IFF_NOTRAILERS Avoid use of trailers . IFF_ALLMULTI Receive all multicast packets . IFF_MASTER Master of a load balancing bundle . IFF_SLAVE Slave of a load balancing bundle.IFF_PORTSEL Is able to select media type via ifmap . IFF_AUTOMEDIA Auto media selection active . IFF_DYNAMIC Interface was dynamically created . IFF_MULTICAST Supports multicast .	240	0
3550	V=2	2 bits This field identifies the version of RTP . The version defined by this specification is two ( 2 ). ( The value 1 is used by the first draft version of RTP and the value 0 is used by the protocol initially implemented in the  vat  audio tool .)	220	0
3550	P	1 bit If the padding bit is set , the packet contains one or more additional padding octets at the end which are not part of the payload . The last octet of the padding contains a count of how many padding octets should be ignored , including itself . Padding may be needed by some encryption algorithms with fixed block sizes or for carrying several RTP packets in a lower-layer protocol data unit .	210	0
3550	X	1 bit If the extension bit is set , the fixed header MUST be followed by exactly one header extension , with a format defined in Section 5.3.1.If the X bit in the RTP header is one , a variable-length header extension MUST be appended to the RTP header , following the CSRC list if present .	210	0
3550	CC	4 bits The CSRC count contains the number of CSRC identifiers that follow the fixed header .	230	0
3550	M	1 bit The interpretation of the marker is defined by a profile . It is intended to allow significant events such as frame boundaries to be marked in the packet stream . A profile MAY define additional marker bits or specify that there is no marker bit by changing the number of bits in the payload type field ( see Section 5.3 ). Additional information that is required for a particular payload format , such as a video encoding , SHOULD be carried in the payload section of the packet . This might be in a header that is always present at the start of the payload section , or might be indicated by a reserved value in the data pattern .	210	0
3550	PT	7 bits This field identifies the format of the RTP payload and determines its interpretation by the application . A profile MAY specify a default static mapping of payload type codes to payload formats . Additional payload type codes MAY be defined dynamically through non-RTP means ( see Section 3 ). A set of default mappings for audio and video is specified in the companion RFC 3551 [ 1 ]. An RTP source MAY change the payload type during a session , but this field SHOULD NOT be used for multiplexing separate media streams ( see Section 5.2 ). For example , in a teleconference composed of audio and video media encoded separately , each medium SHOULD be carried in a separate RTP session with its own destination transport address . Separate audio and video streams SHOULD NOT be carried in a single RTP session and demultiplexed based on the payload type or SSRC fields . Interleaving packets with different RTP media types but using the same SSRC would introduce several problems :	231	0
3588	End-to-End Identifier	The End-to-End Identifier is an unsigned 32-bit integer field ( in network byte order ) and is used to detect duplicate messages . Upon reboot implementations MAY set the high order 12 bits to contain the low order 12 bits of current time , and the low order 20 bits to a random value . Senders of request messages MUST insert a unique identifier on each message . The identifier MUST remain locally unique for a period of at least 4 minutes , even across reboots . The originator of an Answer message MUST ensure that the End-to-End Identifier field contains the same value that was found in the corresponding request . The End-to-End Identifier MUST NOT be modified by Diameter agents of any kind . The combination of the Origin-Host ( see Section 6.3 ) and this field is used to detect duplicates . Duplicate requests SHOULD cause the same answer to be transmitted ( modulo the hop-by-hop Identifier field and any routing AVPs that may be present ), and MUST NOT affect any state that was set when the original request was processed . Duplicate answer messages that are to be locally consumed ( see Section 6.2 ) SHOULD be silently discarded .	231	0
3984	V=2	1 bit Set for the very last packet of the access unit indicated by the RTP timestamp , in line with the normal use of the M bit in video formats , to allow an efficient playout buffer handling . For aggregation packets ( STAP and MTAP ), the marker bit in the RTP header MUST be set to the value that the marker bit of the last NAL unit of the aggregation packet would have been if it were transported in its own RTP packet . Decoders MAY use this bit as an early indication of the last packet of an access unit , but MUST NOT rely on this property . Informative note : Only one M bit is associated with an aggregation packet carrying multiple NAL units . Thus , if a gateway has re-packetized an aggregation packet into several packets , it cannot reliably set the M bit of those packets .	210	0
3984	PT	7 bits The assignment of an RTP payload type for this new packet format is outside the scope of this document and will not be specified here . The assignment of a payload type has to be performed either through the profile used or in a dynamic way .	231	0
4103	M	The M-bit MUST be included . The first packet in a session , and the first packet after an idle period , SHOULD be distinguished by setting the marker bit in the RTP data header to one . The marker bit in all other packets MUST be set to zero . The reception of the marker bit MAY be used for refined methods for detection of loss .	230	0
4103	T140 PT	The assignment of an RTP payload type is specific to the RTP profile under which the payload format is used . For profiles that use dynamic payload type number assignment , this payload format can be identified by the MIME type  text/t140  ( see Section 10 ). If redundancy is used per RFC 2198 , another payload type number needs to be provided for the redundancy format . The MIME type for identifying RFC 2198 is available in RFC 4102 [ 9 ].	231	0
4165	Version	The version field contains the version of M2PA . The supported versions are : Value ( decimal ) Version --------- ------- 1 Release 1.0 of M2PA protocol	231	0
4302	Security Parameters Index	The SPI is an arbitrary 32-bit value that is used by a receiver to identify the SA to which an incoming packet is bound . For a unicast SA , the SPI can be used by itself to specify an SA , or it may be used in conjunction with the IPsec protocol type ( in this case AH ). Because for unicast SAs the SPI value is generated by the receiver , whether the value is sufficient to identify an SA by itself or whether it must be used in conjunction with the IPsec protocol value is a local matter . The SPI field is mandatory , and this mechanism for mapping inbound traffic to unicast SAs described above MUST be supported by all AH implementations . If an IPsec implementation supports multicast , then it MUST support multicast SAs using the algorithm below for mapping inbound IPsec datagrams to SAs . Implementations that support only unicast traffic need not implement this de-multiplexing algorithm . In many secure multicast architectures , e.g ., [ RFC3740 ], a central Group Controller/Key Server unilaterally assigns the group security association's SPI . This SPI assignment is not negotiated or coordinated with the key management ( e.g ., IKE ) subsystems that reside in the individual end systems that comprise the group . Consequently , it is possible that a group security association and a unicast security association can simultaneously use the same SPI . A multicast-capable IPsec implementation MUST correctly de-multiplex inbound traffic even in the context of SPI collisions . Each entry in the Security Association Database ( SAD ) [ Ken-Arch ] must indicate whether the SA lookup makes use of the destination , or destination and source , IP addresses , in addition to the SPI . For multicast SAs , the protocol field is not employed for SA lookups . For each inbound , IPsec-protected packet , an implementation must conduct its search of the SAD such that it finds the entry that matches the  longest  SA identifier . In this context , if two or more SAD entries match based on the SPI value , then the entry that also matches based on destination , or destination and source , address comparison ( as indicated in the SAD entry ) is the  longest  match . This implies a logical ordering of the SAD search as follows : 1 . Search the SAD for a match on { SPI , destination address , source address }. If an SAD entry matches , then process the inbound AH packet with that matching SAD entry . Otherwise , proceed to step 2 . 2 . Search the SAD for a match on { SPI , destination address }. If an SAD entry matches , then process the inbound AH packet with that matching SAD entry . Otherwise , proceed to step 3 . 3 . Search the SAD for a match on only { SPI } if the receiver has chosen to maintain a single SPI space for AH and ESP , or on { SPI , protocol } otherwise . If an SAD entry matches , then process the inbound AH packet with that matching SAD entry . Otherwise , discard the packet and log an auditable event . In practice , an implementation MAY choose any method to accelerate this search , although its externally visible behavior MUST be functionally equivalent to having searched the SAD in the above order . For example , a software-based implementation could index into a hash table by the SPI . The SAD entries in each hash table bucket's linked list are kept sorted to have those SAD entries with the longest SA identifiers first in that linked list . Those SAD entries having the shortest SA identifiers are sorted so that they are the last entries in the linked list . A hardware-based implementation may be able to effect the longest match search intrinsically , using commonly available Ternary Content-Addressable Memory ( TCAM ) features . The indication of whether source and destination address matching is required to map inbound IPsec traffic to SAs MUST be set either as a side effect of manual SA configuration or via negotiation using an SA management protocol , e.g ., IKE or Group Domain of Interpretation ( GDOI ) [ RFC3547 ]. Typically , Source-Specific Multicast ( SSM ) [ HC03 ] groups use a 3-tuple SA identifier composed of an SPI , a destination multicast address , and source address . An Any-Source Multicast group SA requires only an SPI and a destination multicast address as an identifier . The set of SPI values in the range 1 through 255 is reserved by the Internet Assigned Numbers Authority ( IANA ) for future use; a reserved SPI value will not normally be assigned by IANA unless the use of the assigned SPI value is specified in an RFC . The SPI value of zero ( 0 ) is reserved for local , implementation-specific use and MUST NOT be sent on the wire . ( For example , a key management implementation might use the zero SPI value to mean  No Security Association Exists  during the period when the IPsec implementation has requested that its key management entity establish a new SA , but the SA has not yet been established .)	231	0
4302	Integrity Check Value-ICV (variable)	This is a variable-length field that contains the Integrity Check Value ( ICV ) for this packet . The field must be an integral multiple of 32 bits ( IPv4 or IPv6 ) in length . The details of ICV processing are described in Section 3.3.3 ,  Integrity Check Value Calculation , and Section 3.4.4 ,  Integrity Check Value Verification . This field may include explicit padding , if required to ensure that the length of the AH header is an integral multiple of 32 bits ( IPv4 ) or 64 bits ( IPv6 ). All implementations MUST support such padding and MUST insert only enough padding to satisfy the IPv4/IPv6 alignment requirements . Details of how to compute the required padding length are provided below in Section 3.3.3.2 ,  Padding . The integrity algorithm specification MUST specify the length of the ICV and the comparison rules and processing steps for validation .	301	0
6597	M-bit(marker bit)	The RTP header marker bit ( M ) is used to demarcate | | | KLVunits . Senders MUST set the marker bit to ' 1 ' for | | | any RTP packet that contains the final byte of a | | | KLVunit . For all other packets , senders MUST set the | | | RTP header marker bit to ' 0 '. This allows receivers | | | to pass a KLVunit for parsing/decoding immediately | | | upon receipt of the last RTP packet comprising the | | | KLVunit . Without this , a receiver would need to wait | | | for the next RTP packet with a different timestamp to | | | arrive , thus signaling the end of one KLVunit and the | | | start of another .	210	0
6621	Option Type	Option Type  = 00001000 . The highest order three bits are 000 because this specification requires that routers not recognizing this option type skip over this option and continue processing the header and that the option must not change en route [ RFC2460 ].	231	0
6621	Opt. Data Len	Opt . Data Len  = Length of option content ( i.e ., 1 + (< IdType > ? (< IdLen > + 1 ): 0 ) + Length(DPD ID )).	100	0
6621	H(H-bit)	H-bit  = a hash indicator bit value identifying DPD marking type . 0 == sequence-based approach with optional TaggerId and a tuple-based sequence number . 1 == indicates a hash assist value ( HAV ) field follows to aid in avoiding hash-based DPD collisions .	210	0
6621	TidTy	a 3-bit field indicating the presence and type of the optional TaggerId field .	231	0
6621	TidLen	a 4-bit field indicating the length ( in octets ) of the following TaggerId field .	100	0
6621	TaggerId (optional)	a field , is used to differentiate multiple ingressing border gateways that may commonly apply the SMF_DPD option header to packets from a particular source . Table 1 lists the TaggerId types used in this document : +---------+---------------------------------------------------------+ | Name | Purpose | +---------+---------------------------------------------------------+ | NULL | Indicates no TaggerId field is present .  TidLen  MUST | | | also be set to ZERO . | | DEFAULT | A TaggerId of non-specific context is present .  TidLen | | | + 1  defines the length of the TaggerId field in bytes . | | IPv4 | A TaggerId representing an IPv4 address is present . The | | |  TidLen  MUST be set to 3 . | | IPv6 | A TaggerId representing an IPv6 address is present . The | | |  TidLen  MUST be set to 15 . | +---------+---------------------------------------------------------+ Table 1 : TaggerId TypesThis format allows a quick check of the  TidTy  field to determine if a TaggerId field is present . If  TidTy  is NULL , then the length of the DPD packet < Identifier > field corresponds to (< Opt . Data Len > - 1 ). If the < TidTy > is non-NULL , then the length of the TaggerId field is equal to (< TidLen > - 1 ), and the remainder of the option data comprises the DPD packet < Identifier > field . When the TaggerId field is present , the < Identifier > field can be considered a unique packet identifier in the context of the < TaggerId:srcAddr:dstAddr > tuple . When the TaggerId field is not present , then it is assumed that the source applied the SMF_DPD option and the < Identifier > can be considered unique in the context of the IPv6 packet header < srcAddr:dstAddr > tuple . IPv6 I-DPD operation details are in	230	1
6621	Hash Assist Value (HAV)	The SMF_DPD option should be applied with an HAV to produce a unique hash digest for packets within the context of the IPv6 packet header < srcAddr >. The size of the HAV field is implied by  Opt . Data Len . The appropriate size of the field depends upon the collision properties of the specific hash algorithm used .	231	1
6716	config	The top five bits of the TOC byte , labeled  config , encode one of 32 possible configurations of operating mode , audio bandwidth , and frame size . As described , the LP ( SILK ) layer and MDCT ( CELT ) layer can be combined in three possible operating modes:The 32 possible configurations each identify which one of these operating modes the packet uses , as well as the audio bandwidth and the frame size . Table 2 lists the parameters for each configuration .	240	0
6716	s	One additional bit , labeled  s , signals mono vs . stereo , with 0 indicating mono and 1 indicating stereo .	210	0
6716	c	The remaining two bits of the TOC byte , labeled  c , code the number of frames per packet ( codes 0 to 3 ) as follows : o 0 : 1 frame in the packet o 1 : 2 frames in the packet , each with equal compressed size o 2 : 2 frames in the packet , with different compressed sizes o 3 : an arbitrary number of frames in the packet This document refers to a packet as a code 0 packet , code 1 packet , etc ., based on the value of  c .	240	0
6733	Version	This Version field MUST be set to 1 to indicate Diameter Version 1 .	220	0
6733	Message Length	The Message Length field is three octets and indicates the length of the Diameter message including the header fields and the padded AVPs . Thus , the Message Length field is always a multiple of 4 .	100	0
6733	Command Flags	The Command Flags field is eight bits . The following bits are assigned :	231	0
6733	Command Code	The Command Code field is three octets and is used in order to communicate the command associated with the message . The 24-bit address space is managed by IANA ( see Section 3.1 ). Command Code values 16,777,214 and 16,777,215 ( hexadecimal values FFFFFE - FFFFFF ) are reserved for experimental use ( see Section 11.2 ).	231	0
6733	Application-ID	Application-ID is four octets and is used to identify for which application the message is applicable . The application can be an authentication application , an accounting application , or a vendor-specific application . The value of the Application-ID field in the header MUST be the same as any relevant Application-Id AVPs contained in the message .	231	0
6733	Hop-by-Hop Identifier	The Hop-by-Hop Identifier is an unsigned 32-bit integer field ( in network byte order ) that aids in matching requests and replies . The sender MUST ensure that the Hop-by-Hop Identifier in a request is unique on a given connection at any given time , and it MAY attempt to ensure that the number is unique across reboots . The sender of an answer message MUST ensure that the Hop-by-Hop Identifier field contains the same value that was found in the corresponding request . The Hop-by-Hop Identifier is normally a monotonically increasing number , whose start value was randomly generated . An answer message that is received with an unknown Hop-by-Hop Identifier MUST be discarded .	231	0
6733	End-to-End Identifier	The End-to-End Identifier is an unsigned 32-bit integer field ( in network byte order ) that is used to detect duplicate messages . Upon reboot , implementations MAY set the high order 12 bits to contain the low order 12 bits of current time , and the low order 20 bits to a random value . Senders of request messages MUST insert a unique identifier on each message . The identifier MUST remain locally unique for a period of at least 4 minutes , even across reboots . The originator of an answer message MUST ensure that the End-to-End Identifier field contains the same value that was found in the corresponding request . The End-to-End Identifier MUST NOT be modified by Diameter agents of any kind . The combination of the Origin-Host AVP ( Section 6.3 ) and this field is used to detect duplicates . Duplicate requests SHOULD cause the same answer to be transmitted ( modulo the Hop-by-Hop Identifier field and any routing AVPs that may be present ), and they MUST NOT affect any state that was set when the original request was processed . Duplicate answer messages that are to be locally consumed ( see Section 6.2 ) SHOULD be silently discarded .	231	0
6733	AVP Code	The AVP Code , combined with the Vendor-Id field , identifies the attribute uniquely . AVP numbers 1 through 255 are reserved for reuse of RADIUS attributes , without setting the Vendor-Id field . AVP numbers 256 and above are used for Diameter , which are allocated by IANA ( see Section 11.1.1 ).	231	0
6733	AVP Flags	The AVP Flags field informs the receiver how each attribute must be handled . New Diameter applications SHOULD NOT define additional AVP Flag bits . However , note that new Diameter applications MAY define additional bits within the AVP header , and an unrecognized bit SHOULD be considered an error . The sender of the AVP MUST set ' R ' ( reserved ) bits to 0 and the receiver SHOULD ignore all ' R ' ( reserved ) bits . The ' P ' bit has been reserved for future usage of end-to-end security . At the time of writing , there are no end-to-end security mechanisms specified; therefore , the ' P ' bit SHOULD be set to 0 . The ' M ' bit , known as the Mandatory bit , indicates whether the receiver of the AVP MUST parse and understand the semantics of the AVP including its content . The receiving entity MUST return an appropriate error message if it receives an AVP that has the M-bitset but does not understand it . An exception applies when the AVP is embedded within a Grouped AVP . See Section 4.4 for details . Diameter relay and redirect agents MUST NOT reject messages with unrecognized AVPs . The ' M ' bit MUST be set according to the rules defined in the application specification that introduces or reuses this AVP . Within a given application , the M-bit setting for an AVP is defined either for all command types or for each command type . AVPs with the ' M ' bit cleared are informational only; a receiver that receives a message with such an AVP that is not supported , or whose value is not supported , MAY simply ignore the AVP . The ' V ' bit , known as the Vendor-Specific bit , indicates whether the optional Vendor-ID field is present in the AVP header . When set , the AVP Code belongs to the specific vendor code address space .	231	0
6733	AVP Length	The AVP Length field is three octets , and indicates the number of octets in this AVP including the AVP Code field , AVP Length field , AVP Flags field , Vendor-ID field ( if present ), and the AVP Data field . If a message is received with an invalid attribute length , the message MUST be rejected . The AVP header contains one optional field . This field is only present if the respective bit-flag is enabled .	100	0
6733	Vendor-ID	The Vendor-ID field is present if the ' V ' bit is set in the AVP Flags field . The optional four-octet Vendor-ID field contains the IANA-assigned  SMI Network Management Private Enterprise Codes  [ ENTERPRISE ] value , encoded in network byte order . Any vendors or standardization organizations that are also treated like vendors in the IANA-managed  SMI Network Management Private Enterprise Codes  space wishing to implement a vendor-specific Diameter AVP MUST use their own Vendor-ID along with their privately managed AVP address space , guaranteeing that they will not collide with any other vendor's vendor-specific AVP(s ) or with future IETF AVPs.A Vendor-ID value of zero ( 0 ) corresponds to the IETF-adopted AVP values , as managed by IANA . Since the absence of the Vendor-ID field implies that the AVP in question is not vendor specific , implementations MUST NOT use the value of zero ( 0 ) for the Vendor-ID field .	231	0
6733	Data	The Data field is zero or more octets and contains information specific to the Attribute . The format and length of the Data field is determined by the AVP Code and AVP Length fields . The format of the Data field MUST be one of the following base data types or a data type derived from the base data types . In the event that a new Basic AVP Data Format is needed , a new version of this RFC MUST be created .	400	1
5415	Frag Offset	A 13-bit field that indicates where in the payload this fragment belongs during re-assembly . This field is valid when the ' F ' bit is set to 1 . The fragment offset is measured in units of 8 octets ( 64 bits ). The first fragment has offset zero . Note that the CAPWAP protocol does not allow for overlapping fragments .	231	0
5415	Rsvd	The 3-bit field is reserved for future use . All implementations complying with this protocol MUST set to zero any bits that are reserved in the version of the protocol supported by that implementation . Receivers MUST ignore all bits not defined for the version of the protocol they support .	500	0
5433	Length	The Length field is two octets and indicates the length , in octets , of the EAP packet including the Code , Identifier , Length , and Data fields . Octets outside the range of the Length field should be treated as Data Link Layer padding and MUST be ignored upon reception . A message with the Length field set to a value larger than the number of received octets MUST be silently discarded .	100	0
5433	Type	The Type field is one octet . This field indicates the Type of Request or Response . A single Type MUST be specified for each EAP Request or Response . An initial specification of Types follows in Section 5 of this document . The Type field of a Response MUST either match that of the Request , or correspond to a legacy or Expanded Nak ( see Section 5.3 ) indicating that a Request Type is unacceptable to the peer . A peer MUST NOT send a Nak ( legacy or expanded ) in response to a Request , after an initial non-Nak Response has been sent . An EAP server receiving a Response not meeting these requirements MUST silently discard it .	231	0
5433	OP-Code	The OP-Code field is one of 6 values : o 0x00 : Reserved o 0x01 : GPSK-1 o 0x02 : GPSK-2 o 0x03 : GPSK-3 o 0x04 : GPSK-4 o 0x05 : GPSK-Fail o 0x06 : GPSK-Protected-Fail All other values of this OP-Code field are available via IANA registration .	240	0
5433	Payload	Payload formatting is based on the protocol exchange description	400	1
5440	Ver	( Version - 3 bits ): PCEP version number . Current version is version 1 .	220	0
5440	Flags	Flags ( 5 bits ): No flags are currently defined . Unassigned bits are considered as reserved . They MUST be set to zero on transmission and MUST be ignored on receipt .	500	0
5440	Message-Type	Message-Type ( 8 bits ): The following message types are currently defined : Value Meaning 1 Open 2 Keepalive 3 Path Computation Request 4 Path Computation Reply 5 Notification 6 Error 7 Close	240	0
5440	Message-Length	Message-Length ( 16 bits ): total length of the PCEP message including the common header , expressed in bytes .	100	0
5533	Next Header	The payload that follows this header .	400	0
5533	P	A single bit to distinguish Shim6 Payload Extension headers from control messages .	231	0
5533	Receiver Context Tag	47-bit unsigned integer . Allocated by the receiver to identify the context .	231	0
5533	Type	7-bit unsigned integer . Identifies the actual message from the table below . Type codes 0-63 will not trigger R1bis messages on a missing context , while codes 64-127 will trigger R1bis .	231	0
5533	Type-specific	Part of the message that is different for different message types .	400	0
5533	Checksum	16-bit unsigned integer . The checksum is the 16-bit one's complement of the one's complement sum of the entire Shim6 header message , starting with the Shim6 Next Header field and ending as indicated by the Hdr Ext Len . Thus , when there is a payload following the Shim6 header , the payload is NOT included in the Shim6 checksum . Note that , unlike protocols like ICMPv6 , there is no pseudo-header checksum part of the checksum; this provides locator agility without having to change the checksum .	301	0
5533	R	1-bit field . Reserved for future use . Zero on transmit . MUST be ignored on receipt .	500	0
5533	Initiator Context Tag	47-bit field . The Context Tag that the initiator has allocated for the context .	400	0
5533	Initiator Nonce	32-bit unsigned integer . A random number picked by the initiator , which the responder will return in the R1 message .	400	0
5533	Options	Future protocol extensions might define additional options for this message . The C-bit in the option format defines how such a new option will be handled by an implementation .	231	1
6830	UDP Checksum	The ' UDP Checksum ' field SHOULD be transmitted as zero by an ITR for either IPv4 [ RFC0768 ] or IPv6 encapsulation [ UDP-TUNNELS ] [ UDP-ZERO ]. When a packet with a zero UDP checksum is received by an ETR , the ETR MUST accept the packet for decapsulation . When an ITR transmits a non-zero value for the UDP checksum , it MUST send a correctly computed value in this field . When an ETR receives a packet with a non-zero UDP checksum , it MAY choose to verify the checksum value . If it chooses to perform such verification , and the verification fails , the packet MUST be silently dropped . If the ETR chooses not to perform the verification , or performs the verification successfully , the packet MUST be accepted for decapsulation . The handling of UDP checksums for all tunneling protocols , including LISP , is under active discussion within the IETF . When that discussion concludes , any necessary changes will be made to align LISP with the outcome of the broader discussion .	301	0
6830	UDP Length	The ' UDP Length ' field is set for an IPv4-encapsulated packet to be the sum of the inner-header IPv4 Total Length plus the UDP and LISP header lengths . For an IPv6-encapsulated packet , the ' UDP Length ' field is the sum of the inner-header IPv6 Payload Length , the size of the IPv6 header ( 40 octets ), and the size of the UDP and LISP headers .	100	0
6830	N	The N-bit is the nonce-present bit . When this bit is set to 1 , the low-order 24 bits of the first 32 bits of the LISP header contain a Nonce . See Section 6.3.1 for details . Both N - and V-bits MUST NOT be set in the same packet . If they are , a decapsulating ETR MUST treat the ' Nonce/Map-Version ' field as having a Nonce value present .	210	0
6830	L	The L-bit is the ' Locator-Status-Bits ' field enabled bit . When this bit is set to 1 , the Locator-Status-Bits in the second 32 bits of the LISP header are in use .	210	0
6830	E	The E-bit is the echo-nonce-request bit . This bit MUST be ignored and has no meaning when the N-bit is set to 0 . When the N-bit is set to 1 and this bit is set to 1 , an ITR is requesting that the nonce value in the ' Nonce ' field be echoed back in LISP - encapsulated packets when the ITR is also an ETR . See Section 6.3.1 for details .	210	0
6830	V	The V-bit is the Map-Version present bit . When this bit is set to 1 , the N-bit MUST be 0 . Refer to Section 6.6.3 for more details . This bit indicates that the LISP header is encoded in this case as :	210	0
6830	I	The I-bit is the Instance ID bit . See Section 5.5 for more details . When this bit is set to 1 , the ' Locator-Status-Bits ' field is reduced to 8 bits and the high-order 24 bits are used as an Instance ID . If the L-bit is set to 0 , then the low-order 8 bits are transmitted as zero and ignored on receipt . The format of the LISP header would look like this :	210	0
6830	flags	The ' flags ' field is a 3-bit field reserved for future flag use . It MUST be set to 0 on transmit and MUST be ignored on receipt .	500	0
6830	Instance ID	An Instance ID can be carried in a LISP-encapsulated packet . An ITR that prepends a LISP header will copy a 24-bit value used by the LISP router to uniquely identify the address space . The value is copied to the ' Instance ID ' field of the LISP header , and the I-bit is set to 1 . VPN identifier could be used as a 24-bit Instance ID .	230	0
5584	X	Extension(X ): 1 bit Defined by the RTP profile used .	400	0
5584	CC	CSRC count(CC ): 4 bits The CSRC count contains the number of CSRC identifiers that follow the fixed header .	231	0
5584	M	Marker ( M ): 1 bit Set to 1 if the packet is the first packet after a silence period; otherwise , it MUST be set to 0 .	210	0
5584	PT	Payload Type ( PT ): 7 bits The assignment of an RTP payload type for this packet format is outside the scope of this document; it is specified by the RTP profile under which this payload format is used , or signaled dynamically out-of-band ( e.g ., using the Session Description Protocol ( SDP )).	400	0
5584	sequence number	sequence number : 16 bits A sequential number for the RTP packet . It ranges from 0 to 65535 and repeats itself periodically .	100	0
5584	synchronization source  identifier	SSRC : 32 bits The synchronization source identifier for the originator of this SR packet .	230	0
5584	contributing source (CSRC) identifiers .....	CSRC list : 0 to 15 items , 32 bits each . The CSRC count contains the number of CSRC identifiers that follow the fixed header .	230	1
5584	C	Continuation Flag ( C ) : 1 bit The packet that corresponds to the last part of the audio frame data in a fragmentation MUST have this bit set to 0; otherwise , it's set to 1 .	210	0
5651	V	LCT version number ( V ): 4 bits Indicates the LCT version number . The LCT version number for this specification is 1 .	220	0
5651	C	Congestion control flag ( C ): 2 bits C=0 indicates the Congestion Control Information ( CCI ) field is 32 bits in length . C=1 indicates the CCI field is 64 bits in length . C=2 indicates the CCI field is 96 bits in length . C=3 indicates the CCI field is 128 bits in length .	240	0
5651	PSI	Protocol-Specific Indication ( PSI ): 2 bits The usage of these bits , if any , is specific to each protocol instantiation that uses the LCT building block . If no protocol - instantiation-specific usage of these bits is defined , then a sender MUST set them to zero and a receiver MUST ignore these bits .	400	0
5651	Res	Reserved ( Res ): 2 bits These bits are reserved . In this version of the specification , they MUST be set to zero by senders and MUST be ignored by receivers .	500	0
5651	A	Close Session flag ( A ): 1 bit Normally , A is set to 0 . The sender MAY set A to 1 when termination of transmission of packets for the session is imminent . A MAY be set to 1 in just the last packet transmitted for the session , or A MAY be set to 1 in the last few seconds of packets transmitted for the session . Once the sender sets A to 1 in one packet , the sender SHOULD set A to 1 in all subsequent packets until termination of transmission of packets for the session . A received packet with A set to 1 indicates to a receiver that the sender will immediately stop sending packets for the session . When a receiver receives a packet with A set to 1 , the receiver SHOULD assume that no more packets will be sent to the session .	210	0
5651	B	Close Object flag ( B ): 1 bit Normally , B is set to 0 . The sender MAY set B to 1 when termination of transmission of packets for an object is imminent . If the TOI field is in use and B is set to 1 , then termination of transmission for the object identified by the TOI field is imminent . If the TOI field is not in use and B is set to 1 , then termination of transmission for the one object in the session identified by out-of-band information is imminent . B MAY be set to 1 in just the last packet transmitted for the object , or B MAY be set to 1 in the last few seconds that packets are transmitted for the object . Once the sender sets B to 1 in one packet for a particular object , the sender SHOULD set B to 1 in all subsequent packets for the object until termination of transmission of packets for the object . A received packet with B set to 1 indicates to a receiver that the sender will immediately stop sending packets for the object . When a receiver receives a packet with B set to 1 , then it SHOULD assume that no more packets will be sent for the object to the session .	210	0
5651	HDR_LEN	LCT header length ( HDR_LEN ): 8 bits Total length of the LCT header in units of 32-bit words . The length of the LCT header MUST be a multiple of 32 bits . This field can be used to directly access the portion of the packet beyond the LCT header , i.e ., to the first other header if it exists , or to the packet payload if it exists and there is no other header , or to the end of the packet if there are no other headers or packet payload .	100	0
5651	Codepoint	Codepoint ( CP ): 8 bits An opaque identifier that is passed to the packet payload decoder to convey information on the codec being used for the packet payload . The mapping between the codepoint and the actual codec is defined on a per session basis and communicated out-of-band as part of the session description information . The use of the CP field is similar to the Payload Type ( PT ) field in RTP headers as described in [ RFC3550 ].	230	0
5651	Congestion Control Information (CCI, length = 32*(C1) bits)...	Congestion Control Information ( CCI ): 32 , 64 , 96 , or 128 bits Used to carry congestion control information . For example , the congestion control information could include layer numbers , logical channel numbers , and sequence numbers . This field is opaque for the purpose of this specification .	400	1
5651	Transport Session Identifier (TSI, length = 32*S16*H bits)...	Transport Session Identifier ( TSI ): 0 , 16 , 32 , or 48 bits The TSI uniquely identifies a session among all sessions from a particular sender . The TSI is scoped by the IP address of the sender , and thus the IP address of the sender and the TSI together uniquely identify the session . Although a TSI in conjunction with the IP address of the sender always uniquely identifies a session , whether or not the TSI is included in the LCT header depends on what is used as the TSI value . If the underlying transport is UDP , then the 16-bit UDP source port number MAY serve as the TSI for the session . If the TSI value appears multiple times in a packet , then all occurrences MUST be the same value . If there is no underlying TSI provided by the network , transport or any other layer , then the TSI MUST be included in the LCT header . The TSI MUST be unique among all sessions served by the sender during the period when the session is active , and for a large period of time preceding and following when the session is active . A primary purpose of the TSI is to prevent receivers from inadvertently accepting packets from a sender that belong to sessions other than the sessions to which receivers are subscribed . For example , suppose a session is deactivated and then another session is activated by a sender and the two sessions use an overlapping set of channels . A receiver that connects and remains connected to the first session during this sender activity could possibly accept packets from the second session as belonging to the first session if the TSI for the two sessions were identical . The mapping of TSI field values to sessions is outside the scope of this document and is to be done out-of-band . The length of the TSI field is 32*S + 16*H bits . Note that the aggregate lengths of the TSI field plus the TOI field is a multiple of 32 bits .	230	1
5651	Transport Object Identifier (TOI, length = 32*O16*H bits)...	Transport Object Identifier ( TOI ): 0 , 16 , 32 , 48 , 64 , 80 , 96 , or 112 bits . This field indicates to which object within the session this packet pertains . For example , a sender might send a number of files in the same session , using TOI=0 for the first file , TOI=1 for the second one , etc . As another example , the TOI may be a unique global identifier of the object that is being transmitted from several senders concurrently , and the TOI value may be the output of a hash function applied to the object . The mapping of TOI field values to objects is outside the scope of this document and is to be done out-of-band . The TOI field MUST be used in all packets if more than one object is to be transmitted in a session , i.e ., the TOI field is either present in all the packets of a session or is never present . The length of the TOI field is 32*O + 16*H bits . Note that the aggregate length of the TSI field plus the TOI field is a multiple of 32 bits .	230	1
5651	Header Extensions (if applicable)...	Header Extensions are used in LCT to accommodate optional header fields that are not always used or have variable size .	400	1
5651	HET	Header Extension Type ( HET ): 8 bits The type of the Header Extension . This document defines a number of possible types . Additional types may be defined in future versions of this specification . HET values from 0 to 127 are used for variable-length Header Extensions . HET values from 128 to 255 are used for fixed-length 32-bit Header Extensions .	231	0
5651	HEL	Header Extension Length ( HEL ): 8 bits The length of the whole Header Extension field , expressed in multiples of 32-bit words . This field MUST be present for variable-length extensions ( HETs between 0 and 127 ) and MUST NOT be present for fixed-length extensions ( HETs between 128 and 255 ).	100	0
5651	Header Extension Content (HEC)	Header Extension Content ( HEC ): variable length The content of the Header Extension . The format of this sub - field depends on the Header Extension Type . For fixed-length Header Extensions , the HEC is 24 bits . For variable-length Header Extensions , the HEC field has variable size , as specified by the HEL field . Note that the length of each Header Extension field MUST be a multiple of 32 bits . Also note that the total size of the LCT header , including all Header Extensions and all optional header fields , cannot exceed 255 32-bit words .	400	1
5666	Version	Version number . This version of the RPC RDMA message protocol is 1 . The version number MUST be increased by 1 whenever the format of the RPC RDMA messages is changed .	220	0
5666	Message Type	Message type . o RDMA_MSG = 0 indicates that chunk lists and RPC message follow . o RDMA_NOMSG = 1 indicates that after the chunk lists there is no RPC message . In this case , the chunk lists provide information to allow the message proper to be transferred using RDMA Read or Write and thus is not appended to the RPC-over-RDMA header . o RDMA_MSGP = 2 indicates that a chunk list and RPC message with some padding follow . o RDMA_DONE = 3 indicates that the message signals the completion of a chunk transfer via RDMA Read . o RDMA_ERROR = 4 is used to signal any detected error(s ) in the RPC RDMA chunk encoding . Because the version number is encoded as part of this header , and the RDMA_ERROR message type is used to indicate errors , these first four fields and the start of the following message body MUST always remain aligned at these fixed offsets for all versions of the RPC-over-RDMA header .	240	0
5666	NULLs or Chunk Lists	For a message of type RDMA_MSG or RDMA_NOMSG , the Read and Write chunk lists follow . If the message type is RDMA_MSGP , then two additional fields that specify the padding alignment and threshold are inserted prior to the Read and Write chunk lists .	400	1
5666	RPC Call or Reply Msg	A header of message type RDMA_MSG or RDMA_MSGP MUST be followed by the RPC call or RPC reply message body , beginning with the XID . The XID in the RDMA_MSG or RDMA_MSGP header MUST match this .	400	1
5666	Long RPC Call or Reply Message	If the receiver gets an RPC-over-RDMA header with a message type of RDMA_NOMSG and finds an initial read chunk list entry with a zero XDR position , it allocates a registered buffer and issues an RDMA Read of the long RPC message into it . The receiver then proceeds to XDR decode the RPC message as if it had received it inline with the Send data . Further decoding may issue additional RDMA Reads to bring over additional chunks . Although the handling of long messages requires one extra network turnaround , in practice these messages will be rare if the posted receive buffers are correctly sized , and of course they will be non-existent for RDMA-aware upper layers .	400	1
5686	MX	Mixing information ( MX ): 8 bits Mixing information field . This field is only relevant when Topo - RTCP-terminating-MCUs are utilized to interpret these fields . See Section 3.3.1.1 for details of the fields .	400	0
5686	PC	Packet-loss Concealment information ( PC ): 40 bits Packet-loss concealment ( PLC ) information field .	400	0
5666	C1	Check bit #1 ( C1 ): 1 bit Validity flag of V1 and PW1 . This bit being  1  indicates that both parameters are valid , and  0  indicates that the parameters should be ignored . If any of these parameters is invalid , this bit should be set to  0 . This flag is mainly intended for a UEMCLIP-conscious Topo-RTCP-terminating-MCU . This flag should be set to  0  in case of upward transcoding from G.711 ( see Section 4 ).	210	0
5686	R1	Reserved bit #1 ( R1 ): 1 bit This bit should be ignored . The default of this bit is 0 .	500	0
5686	V1	VAD flag #1 ( V1 ): 1 bit Voice activity detection flag of the current frame , designed to be used for MCU operations . This flag being  1  indicates that the frame is an active ( voice ) segment , and  0  indicates that it is an inactive ( non-voice ) or a silent segment . This flag is specifically designed for mixing information . DTX judgment based this flag is not recommended .	210	0
5686	C2	Check bit #2 ( C2 ): 1 bit Validity flag of V2 , K , U1 , P1 , U2 , P2 , and PW2 . If the flag is  1 , it means that all these parameters are valid , and  0  means that the parameters should be ignored . If any of these parameters is invalid , this bit should be set to  0 . Similarly to C1 , this flag should be set to  0  in case of upward transcoding from G.711 ( see Section 4 ).	210	0
5686	R2	Reserved bit #2 ( R2 ): 2 bits These bits should be ignored . The default of these bits are 0 .	500	0
5666	V2	VAD flag #2 ( V2 ): 1 bit Voice activity detection flag of the current frame , designed to be used for packet-loss concealment . This might not be the same as V1 in the mixing information , and might not be synchronous to the marker bit in the RTP header . DTX judgment based this flag is not recommended .	231	0
5686	U1	V/UV flag #1 ( U1 ): 1 bit Voiced/Unvoiced signal indicator of the current frame . This flag being  0  indicates that the frame is a voiced signal segment , and  1  indicates that it is an unvoiced signal segment .	210	0
5686	U2	V/UV flag #2 ( U2 ): 1 bit Voiced/Unvoiced signal indicator of the offset frame . This flag being  0  indicates that the frame is a voiced signal segment , and  1  indicates that it is an unvoiced signal segment . The offset value is defined as K .	210	0
5686	R3	Reserved bits #3 ( R3 ): 8 bits These bits should be ignored . The default of all bits are  0 .	500	0
5666	FI	Frequency index ( FI ): 2 bits Indicates the frequency number .  0  means that the layer is in the base frequency band , higher number means that the layer is in respective frequency band .	231	0
5686	QI	Quality index ( QI ): 2 bits Indicates the quality layer number .  0  means that the layer is in the base layer , and higher number means that the layer is in respective quality layer .	231	0
5686	R4	Reserved #4 ( R4 ): 2 bits Not used ( reserved ). The default value is  0 .	500	0
5666	SB	Sub-layer Size ( SB ): 8 bits Indicates the byte size of the following sub-layer data .	100	0
5686	LD	Layer Data ( LD ): SB*8 bits The actual sub-layer data .	400	1
5726	Type	A unique type ( together with the ' A ' bit in the Reserved field ) for identifying the Pseudo Home Address Acknowledgement mobility option . For experimental purpose , the value of this type is 18 as reserved in RFC 5096 .	231	0
5726	Length	The length of the Pseudo Home Address mobility option excluding the Type field and the Length field . It MUST be 2 when the Pseudo Home Address field is not present; otherwise , it MUST be 18 .	100	0
5726	Reserved Field	The ' A ' bit , which MUST be set to zero to indicate that this is a Pseudo Home Address mobility option . The rest of bits MUST be set as zero by the sender and ignored by the receiver .	500	0
5726	Prefix Length	The length of the home network prefix of the included pseudo home address . When the Pseudo Home Address field is not present , the Prefix Length field MUST be set as zero .	100	0
5792	Version	This field indicates the version of the format for the PA-TNC message . This version is intended to allow for evolution of the PA-TNC message header and payload in a manner that can easily be detected by message recipients .	220	0
5792	Reserved	Reserved for future use . This field MUST be set to 0 on transmission and ignored upon reception .	500	0
5792	Message Identifier	This field contains a value that uniquely identifies this message , differentiating it from others sent by a particular PA-TNC message sender within this assessment . This value can be included in the payload of a response message to indicate which message was received and caused the response . This value is included in the payload of PA-TNC error messages so the party who receives the error message can determine which of the messages they had sent caused the error . PA-TNC message senders MUST NOT send the same message identifier more than once during an assessment . Message identifiers may be randomly generated or sequenced as long as values are not repeated during an assessment message exchange . PA-TNC message recipients are not required to check for duplicate message identifiers .	230	0
5792	Message Identifier	This field contains a value that uniquely identifies this message , differentiating it from others sent by a particular PA-TNC message sender within this assessment . This value can be included in the payload of a response message to indicate which message was received and caused the response . This value is included in the payload of PA-TNC error messages so the party who receives the error message can determine which of the messages they had sent caused the error . PA-TNC message senders MUST NOT send the same message identifier more than once during an assessment . Message identifiers may be randomly generated or sequenced as long as values are not repeated during an assessment message exchange . PA-TNC message recipients are not required to check for duplicate message identifiers .	230	0
5792	Flags	Bit 0 ( 0x80 ) is the NOSKIP flag . Any Posture Collector or Posture Validator that receives an attribute with this flag set to 1 but does not support this attribute MUST NOT process any part of the PA-TNC message and SHOULD respond with an Attribute Type Not Supported error in a PA-TNC error message . In order to avoid taking action on a subset of the attributes only to later find an unsupported attribute with the NOSKIP flag set , recipients of a multi-attribute PA-TNC message might need to scan all of the attributes prior to acting upon any attribute . When the NOSKIP flag is set to 0 , recipients SHOULD skip any unsupported attributes and continue processing the next attribute . Bit 1-7 are reserved for future use . These bits MUST be set to 0 on transmission and ignored upon reception .	500	0
5792	PA-TNC Attribute Vendor ID	This field indicates the owner of the namespace associated with the PA-TNC Attribute Type . This is accomplished by specifying the 24-bit SMI Private Enterprise Number Vendor ID of the party who owns the Attribute Type namespace . IETF Standard PA-TNC Attribute Types MUST use zero ( 0 ) in this field .	400	0
5792	PA-TNC Attribute Type	This field defines the type of the attribute included in the Attribute Value field . This field is qualified by the PA-TNC Attribute Vendor ID field so that a particular PA-TNC Attribute Type value ( e.g ., 327 ) has a completely different meaning depending on the value in the PA-TNC Attribute Vendor ID field . Posture Collectors and Posture Validators MUST NOT require support for particular vendor-specific PA-TNC Attribute Types and MUST interoperate with other parties despite any differences in the set of vendor-specific PA-TNC Attribute Types supported ( although they MAY permit administrators to configure them to require support for specific PA-TNC attribute types ).	400	0
5792	PA-TNC Attribute Length	This field contains the length in octets of the entire PA-TNC attribute including the PA-TNC Attribute Header ( the fields Flags , PA-TNC Attribute Vendor ID , PA-TNC Attribute Type , and PA-TNC Attribute Length ). Therefore , this value MUST always be at least 12 . Any Posture Collector or Posture Validator that receives a message with a PA-TNC Attribute Length field whose value is less than 12 SHOULD respond with an Invalid Parameter PA-TNC error code . Similarly , if a Posture Collector or Posture Validator receives a PA-TNC message for an Attribute Type that has a well - known Attribute Value length ( e.g ., fixed-length attribute value ) and the Attribute Length indicates a different value ( greater or less than the expected value ), the recipient SHOULD respond with an Invalid Parameter PA-TNC error code .	100	0
5792	Attribute Value ( Variable Length )	This field varies depending on the particular type of attribute being expressed .	400	1
5792	Major Version Number	This field contains the major version number for the product , if applicable . If unused or unknown , this field SHOULD be set to 0 .	220	0
5792	Minor Version Number	This field contains the minor version number for the product , if applicable . If unused or unknown , this field SHOULD be set to 0 .	220	0
1889	CC	4 bits . The CSRC count contains the number of CSRC identifiers that follow the fixed header .	100	0
1963	PPP Protocol ID	The PPP Protocol ID field is described in the Point-to-Point Protocol Encapsulation [ 1 ]. When the SDTP Protocol is successfully negotiated by the SDTP Control Protocol ( SDCP ), the value is 0049 hex . This value may be compressed to one octet when Protocol-Field-Compression is negotiated , or if one of the PPP compression protocols [ 4-10 ] is used .	400	0
1963	(Length)	The optional Length field is present in every SDTP packet upon successful negotiation of the Length-Field-Present Configuration Option . The value of the Length field is the combined lengths of the Length , Port ( if present ), Header , Transmitted Data , and Odd-Pad ( if present ) fields in octets . The length of the Length field defaults to one octet . Valid lengths are from 2 to 255 octets , since each packet must include If desired , the length field can be negotiated to be two octets in length . In that case , valid lengths are from 2 to 65535 octets , and the field is transmitted most significant octet first . In either case , a length of 0 means that the combined length is the same as the length of the remainder of the PPP Information Field .	100	0
1963	(Port)	The optional Port field is present in every SDTP packet upon successful negotiation of the Multi-Port Option . The length of the Port field is one octet . Valid Port numbers are 0 to 254 . Port number 255 is reserved for control purposes ( see section on flow control ).	231	0
1963	Transported Data	The transported data field contains the transported serial data . When the serial data type has been negotiated to be HDLC-like synchronous , this field will contain all or part of a transported HDLC-like frame . A sample transported HDLC frame is shown below . The figure does not show bits inserted for transparency . Only the data between the flags is transported . The flags are not transported . The FCS is tranported unless the FCS-Mode Configuration Option has been successfully negotiated otherwise .	400	1
1963	Header - (CS) :       H	The Header field is the terminal adaption header from ITU-T Recommendation V.120 . As specified in that document , it contains up to two octets : The terminal adaption header octet ( H ), and the optional header extension for control state information ( CS ). SDTP only supports the protocol sensitive operation of V.120; bit transparent operation is not supported . The descriptions of the header bits provided below are derived from the descriptions provided in Recommendation V.120 . In addition to the bit definitions of V.120 , SDTP optionally permits the use of reserved bits to be used for flow control and to provide support for non - octet aligned frames . The length of the Header field is either one or two octets , and is determined by the value of the E bit in the first octet . By default , the E-bit must be set in the H octet and the CS octet is not present . A Configuration Option may be negotiated to allow the use of the CS octet , or even to require its presence in every packet .	400	0
3331	Message Length	The Message Length defines the length of the message in octets , including the header .	100	0
3332	Version	The version field contains the version of the M3UA adaptation layer . The supported versions are the following : 1 Release 1.0	220	0
3332	Reserved	The Reserved field SHOULD be set to all ' 0's and ignored by the receiver .	500	0
3332	Message Class	The following list contains the valid Message Classes : Message Class : 8 bits ( unsigned integer ) The following list contains the valid Message Type Classes : 0 Management ( MGMT ) Messages 1 Transfer Messages 2 SS7 Signalling Network Management ( SSNM ) Messages 3 ASP State Maintenance ( ASPSM ) Messages 4 ASP Traffic Maintenance ( ASPTM ) Messages 5 Reserved for Other Sigtran Adaptation Layers 6 Reserved for Other Sigtran Adaptation Layers 7 Reserved for Other Sigtran Adaptation Layers 8 Reserved for Other Sigtran Adaptation Layers 9 Routing Key Management ( RKM ) Messages 10 to 127 Reserved by the IETF 128 to 255 Reserved for IETF-Defined Message Class extensions	240	0
3332	Message Type	The following list contains the message types for the defined messages . Management ( MGMT ) Messages ( See Section 3.8 ) 0 Error ( ERR ) 1 Notify ( NTFY ) 2 to 127 Reserved by the IETF 128 to 255 Reserved for IETF-Defined MGMT extensions	240	0
3332	Message Length	The Message Length defines the length of the message in octets , including the Common Header . The Message Length MUST include parameter padding bytes , if any .	100	0
3450	Encoding Symbol(s)	32 bits The Encoding Symbol ID identifies which specific encoding symbol(s ) generated from the source block are carried in the packet payload . The exact details of the correspondence between Encoding Symbol IDs and the encoding symbol(s ) in the packet payload are dependent on the particular encoding algorithm used as identified by the FEC Encoding ID and by the FEC Instance ID .	231	0
3451	V	LCT version number ( V ): 4 bits Indicates the LCT version number . The LCT version number for this specification is 1 .	220	0
3451	C	Congestion control flag ( C ): 2 bits C=0 indicates the Congestion Control Information ( CCI ) field is 32-bits in length . C=1 indicates the CCI field is 64-bits in length . C=2 indicates the CCI field is 96-bits in length . C=3 indicates the CCI field is 128-bits in length .	240	0
3451	r	Reserved ( r ): 2 bits Reserved for future use . A sender MUST set these bits to zero and a receiver MUST ignore these bits .	500	0
5106	Type	The EAP Type for this EAP method is 49 .	220	0
5106	Message Length	The Message Length field is not always present; its presence is determined by a certain flag in the Flags field , as described in Section 8.1 .	100	1
5106	Integrity Checksum Data	The Integrity Checksum Data field is not always present; its presence is determined by a certain flag in the Flags field , as described in Section 8.1 . The Integrity Checksum Data field contains a cryptographic checksum that covers the entire EAP message , starting with the Code field , and ending at the end of the EAP Data field . This field , shown in Figure 4 , is present only if the I bit is set in the Flags field . The Integrity Checksum Data field immediately follows the EAP Data field without padding .	301	1
